window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "screen_brightness_control", "modulename": "screen_brightness_control", "type": "module", "doc": "<p></p>\n"}, {"fullname": "screen_brightness_control.get_brightness", "modulename": "screen_brightness_control", "qualname": "get_brightness", "type": "function", "doc": "<p>Returns the current display brightness</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (str or int):</strong>  the specific display to query</li>\n<li><strong>method (str):</strong>  the method to use to get the brightness. See <code>get_methods</code> for\nmore info on available methods</li>\n<li><strong>verbose_error (bool):</strong>  controls the level of detail in the error messages</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  a list of integers (from 0 to 100), each integer being the\npercentage brightness of a display (invalid displays may return None)</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># get the current screen brightness (for all detected displays)</span>\n<span class=\"n\">current_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># get the brightness of the primary display</span>\n<span class=\"n\">primary_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get the brightness of the secondary display (if connected)</span>\n<span class=\"n\">secondary_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose_error</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.set_brightness", "modulename": "screen_brightness_control", "qualname": "set_brightness", "type": "function", "doc": "<p>Sets the screen brightness</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>value (int or float or str):</strong>  a value 0 to 100. This is a percentage or a string as '+5' or '-5'</li>\n<li><strong>display (int or str):</strong>  the specific display to adjust</li>\n<li><strong>method (str):</strong>  the method to use to set the brightness. See <code>get_methods</code> for\nmore info on available methods</li>\n<li><strong>force (bool):</strong>  [<em>Linux Only</em>] if False the brightness will never be set lower than 1.\nThis is because on most displays a brightness of 0 will turn off the backlight.\nIf True, this check is bypassed</li>\n<li><strong>verbose_error (bool):</strong>  boolean value controls the amount of detail error messages will contain</li>\n<li><strong>no_return (bool):</strong>  if False, this function returns new brightness (by calling <code>get_brightness</code>).\nIf True, this function returns None (default behaviour).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None:</strong>  if the <code>no_return</code> kwarg is <code>True</code></li>\n<li><strong>list:</strong>  a list of integers (from 0 to 100), each integer being the\npercentage brightness of a display (invalid displays may return None)</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># set brightness to 50%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set brightness to 0%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># increase brightness by 25%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"s1\">&#39;+25&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># decrease brightness by 30%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"s1\">&#39;-30&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the brightness of display 0 to 50%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">display</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verbose_error</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">no_return</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.fade_brightness", "modulename": "screen_brightness_control", "qualname": "fade_brightness", "type": "function", "doc": "<p>A function to somewhat gently fade the screen brightness from <code>start</code> to <code>finish</code></p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>finish (int or str):</strong>  the brightness level to end up on</li>\n<li><strong>start (int or str):</strong>  where the brightness should fade from.\nIf not specified the function starts from the current screen brightness</li>\n<li><strong>interval (float or int):</strong>  the time delay between each step in brightness</li>\n<li><strong>increment (int):</strong>  the amount to change the brightness by per step</li>\n<li><strong>blocking (bool):</strong>  whether this should occur in the main thread (<code>True</code>) or a new daemonic thread (<code>False</code>)</li>\n<li><strong>force (bool):</strong>  [<em>Linux Only</em>] if False the brightness will never be set lower than 1.\nThis is because on most displays a brightness of 0 will turn off the backlight.\nIf True, this check is bypassed</li>\n<li><strong>logarithmic (bool):</strong>  follow a logarithmic brightness curve when adjusting the brightness</li>\n<li><strong>kwargs (dict):</strong>  passed directly to <code>set_brightness</code>.\nAny compatible kwargs are passed to <code>filter_monitors</code> as well. (eg: display, method...)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of <code>threading.Thread</code> objects if <code>blocking == False</code>,\notherwise it returns the result of <code>get_brightness()</code></li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># fade brightness from the current brightness to 50%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">fade_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># fade the brightness from 25% to 75%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">fade_brightness</span><span class=\"p\">(</span><span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># fade the brightness from the current value to 100% in steps of 10%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">fade_brightness</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">increment</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># fade the brightness from 100% to 90% with time intervals of 0.1 seconds</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">fade_brightness</span><span class=\"p\">(</span><span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># fade the brightness to 100% in a new thread</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">fade_brightness</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">blocking</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">finish</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">increment</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">blocking</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">logarithmic</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.list_monitors_info", "modulename": "screen_brightness_control", "qualname": "list_monitors_info", "type": "function", "doc": "<p>list detailed information about all monitors that are controllable by this library</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>method (str):</strong>  the method to use to list the available monitors. See <code>get_methods</code> for\nmore info on available methods</li>\n<li><strong>allow_duplicates (bool):</strong>  whether to filter out duplicate displays or not</li>\n<li><strong>unsupported (bool):</strong>  include detected displays that are invalid or unsupported</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of dictionaries</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n<span class=\"n\">monitors</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">list_monitors_info</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">monitor</span> <span class=\"ow\">in</span> <span class=\"n\">monitors</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;=======================&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># the manufacturer name plus the model</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Name:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">])</span>\n    <span class=\"c1\"># the general model of the display</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Model:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;model&#39;</span><span class=\"p\">])</span>\n    <span class=\"c1\"># the serial of the display</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Serial:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;serial&#39;</span><span class=\"p\">])</span>\n    <span class=\"c1\"># the name of the brand of the monitor</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Manufacturer:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;manufacturer&#39;</span><span class=\"p\">])</span>\n    <span class=\"c1\"># the 3 letter code corresponding to the brand name, EG: BNQ -&gt; BenQ</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Manufacturer ID:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;manufacturer_id&#39;</span><span class=\"p\">])</span>\n    <span class=\"c1\"># the index of that display FOR THE SPECIFIC METHOD THE DISPLAY USES</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Index:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">])</span>\n    <span class=\"c1\"># the method this monitor can be addressed by</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Method:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;method&#39;</span><span class=\"p\">])</span>\n    <span class=\"c1\"># the EDID string associated with that monitor</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;EDID:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;edid&#39;</span><span class=\"p\">])</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">allow_duplicates</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">unsupported</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.list_monitors", "modulename": "screen_brightness_control", "qualname": "list_monitors", "type": "function", "doc": "<p>List the names of all detected monitors</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>method (str):</strong>  the method to use to list the available monitors. See <code>get_methods</code> for\nmore info on available methods</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of strings</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n<span class=\"n\">monitor_names</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">list_monitors</span><span class=\"p\">()</span>\n<span class=\"c1\"># eg: [&#39;BenQ GL2450H&#39;, &#39;Dell U2211H&#39;]</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.get_methods", "modulename": "screen_brightness_control", "qualname": "get_methods", "type": "function", "doc": "<p>Returns all available brightness method names and their associated classes.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict:</strong>  keys are the method names. This is what you would use\nif a function has a <code>method</code> kwarg.\nValues are the classes themselves</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"n\">all_methods</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">get_methods</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">method_name</span><span class=\"p\">,</span> <span class=\"n\">method_class</span> <span class=\"ow\">in</span> <span class=\"n\">all_methods</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Method:&#39;</span><span class=\"p\">,</span> <span class=\"n\">method_name</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Class:&#39;</span><span class=\"p\">,</span> <span class=\"n\">method_class</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Associated monitors:&#39;</span><span class=\"p\">,</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">list_monitors</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"n\">method_name</span><span class=\"p\">))</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.Monitor", "modulename": "screen_brightness_control", "qualname": "Monitor", "type": "class", "doc": "<p>A class to manage a single monitor and its relevant information</p>\n"}, {"fullname": "screen_brightness_control.Monitor.__init__", "modulename": "screen_brightness_control", "qualname": "Monitor.__init__", "type": "function", "doc": "<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (int or str or dict):</strong>  the index/name/model name/serial/edid\nof the display you wish to control. Is passed to <code>filter_monitors</code>\nto decide which display to use.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>LookupError:</strong>  if a matching display could not be found</li>\n<li><strong>TypeError:</strong>  if the given display type is not int or str</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># create a class for the primary monitor and then a specifically named monitor</span>\n<span class=\"n\">primary</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">Monitor</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">benq_monitor</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">Monitor</span><span class=\"p\">(</span><span class=\"s1\">&#39;BenQ GL2450H&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># check if the benq monitor is the primary one</span>\n<span class=\"k\">if</span> <span class=\"n\">primary</span><span class=\"o\">.</span><span class=\"n\">serial</span> <span class=\"o\">==</span> <span class=\"n\">benq_monitor</span><span class=\"o\">.</span><span class=\"n\">serial</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;BenQ GL2450H is the primary display&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;The primary display is&#39;</span><span class=\"p\">,</span> <span class=\"n\">primary</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># this class can also be accessed like a dictionary</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">primary</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">benq_monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">])</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "screen_brightness_control.Monitor.serial", "modulename": "screen_brightness_control", "qualname": "Monitor.serial", "type": "variable", "doc": "<p>the serial number of the display or (if serial is not available) an ID assigned by the OS</p>\n", "annotation": ": str"}, {"fullname": "screen_brightness_control.Monitor.name", "modulename": "screen_brightness_control", "qualname": "Monitor.name", "type": "variable", "doc": "<p>the monitors manufacturer name plus its model</p>\n", "annotation": ": str"}, {"fullname": "screen_brightness_control.Monitor.method", "modulename": "screen_brightness_control", "qualname": "Monitor.method", "type": "variable", "doc": "<p>the method by which this monitor can be addressed.\nThis will be a class from either the windows or linux sub-module</p>\n"}, {"fullname": "screen_brightness_control.Monitor.manufacturer", "modulename": "screen_brightness_control", "qualname": "Monitor.manufacturer", "type": "variable", "doc": "<p>the name of the brand of the monitor</p>\n", "annotation": ": str"}, {"fullname": "screen_brightness_control.Monitor.manufacturer_id", "modulename": "screen_brightness_control", "qualname": "Monitor.manufacturer_id", "type": "variable", "doc": "<p>the 3 letter manufacturing code corresponding to the manufacturer name</p>\n", "annotation": ": str"}, {"fullname": "screen_brightness_control.Monitor.model", "modulename": "screen_brightness_control", "qualname": "Monitor.model", "type": "variable", "doc": "<p>the general model of the display</p>\n", "annotation": ": str"}, {"fullname": "screen_brightness_control.Monitor.index", "modulename": "screen_brightness_control", "qualname": "Monitor.index", "type": "variable", "doc": "<p>the index of the monitor FOR THE SPECIFIC METHOD THIS MONITOR USES.</p>\n", "annotation": ": int"}, {"fullname": "screen_brightness_control.Monitor.edid", "modulename": "screen_brightness_control", "qualname": "Monitor.edid", "type": "variable", "doc": "<p>a unique string returned by the monitor that contains its DDC capabilities, serial and name</p>\n", "annotation": ": str"}, {"fullname": "screen_brightness_control.Monitor.get_identifier", "modulename": "screen_brightness_control", "qualname": "Monitor.get_identifier", "type": "function", "doc": "<p>Returns the piece of information used to identify this monitor.\nWill iterate through the EDID, serial, name and index and return the first\nvalue that is not equal to None</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>monitor (dict):</strong>  extract an identifier from this dict instead of the monitor class</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple:</strong>  the name of the property returned and the value of said property.\nEG: <code>('serial', '123abc...')</code> or <code>('name', 'BenQ GL2450H')</code></li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n<span class=\"n\">primary</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">Monitor</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">primary</span><span class=\"o\">.</span><span class=\"n\">get_identifier</span><span class=\"p\">())</span>  <span class=\"c1\"># eg: (&#39;serial&#39;, &#39;123abc...&#39;)</span>\n\n<span class=\"n\">secondary</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">list_monitors_info</span><span class=\"p\">()[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">primary</span><span class=\"o\">.</span><span class=\"n\">get_identifier</span><span class=\"p\">(</span><span class=\"n\">monitor</span><span class=\"o\">=</span><span class=\"n\">secondary</span><span class=\"p\">))</span>  <span class=\"c1\"># eg: (&#39;serial&#39;, &#39;456def...&#39;)</span>\n\n<span class=\"c1\"># you can also use the class uninitialized</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">Monitor</span><span class=\"o\">.</span><span class=\"n\">get_identifier</span><span class=\"p\">(</span><span class=\"n\">secondary</span><span class=\"p\">))</span>  <span class=\"c1\"># eg: (&#39;serial&#39;, &#39;456def...&#39;)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">monitor</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.Monitor.set_brightness", "modulename": "screen_brightness_control", "qualname": "Monitor.set_brightness", "type": "function", "doc": "<p>Sets the brightness for this display. See <code>set_brightness</code> for the full docs</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>value (int):</strong>  the brightness value to set the display to (from 0 to 100)</li>\n<li><strong>no_return (bool):</strong>  if true, this function returns <code>None</code>\nOtherwise it returns the result of <code>Monitor.get_brightness</code></li>\n<li><strong>force (bool):</strong>  [<em>Linux Only</em>] if False the brightness will never be set lower than 1.\nThis is because on most displays a brightness of 0 will turn off the backlight.\nIf True, this check is bypassed</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None:</strong>  if <code>no_return==True</code></li>\n<li><strong>int:</strong>  from 0 to 100</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># set the brightness of the primary monitor to 50%</span>\n<span class=\"n\">primary</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">Monitor</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">primary</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">no_return</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.Monitor.get_brightness", "modulename": "screen_brightness_control", "qualname": "Monitor.get_brightness", "type": "function", "doc": "<p>Returns the brightness of this display.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int:</strong>  from 0 to 100</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># get the brightness of the primary monitor</span>\n<span class=\"n\">primary</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">Monitor</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">primary_brightness</span> <span class=\"o\">=</span> <span class=\"n\">primary</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">()</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.Monitor.fade_brightness", "modulename": "screen_brightness_control", "qualname": "Monitor.fade_brightness", "type": "function", "doc": "<p>Fades the brightness for this display. See <code>fade_brightness</code> for the full docs</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>args (tuple):</strong>  passed directly to <code>fade_brightness</code></li>\n<li><strong>kwargs (dict):</strong>  passed directly to <code>fade_brightness</code>.\nThe <code>display</code> and <code>method</code> kwargs are always\noverwritten.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>threading.Thread:</strong>  if the the blocking kwarg is False</li>\n<li><strong>int:</strong>  if the blocking kwarg is True</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># fade the brightness of the primary monitor to 50%</span>\n<span class=\"n\">primary</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">Monitor</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">primary</span><span class=\"o\">.</span><span class=\"n\">fade_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.Monitor.get_info", "modulename": "screen_brightness_control", "qualname": "Monitor.get_info", "type": "function", "doc": "<p>Returns all known information about this monitor instance</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  whether to refresh the information\nor to return the cached version</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li>dict</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># initialize class for primary monitor</span>\n<span class=\"n\">primary</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">Monitor</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"c1\"># get the info</span>\n<span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">primary</span><span class=\"o\">.</span><span class=\"n\">get_info</span><span class=\"p\">()</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">refresh</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.Monitor.is_active", "modulename": "screen_brightness_control", "qualname": "Monitor.is_active", "type": "function", "doc": "<p>Attempts to retrieve the brightness for this display. If it works the display is deemed active</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool:</strong>  True means active, False means inactive</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"n\">primary</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">Monitor</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">primary</span><span class=\"o\">.</span><span class=\"n\">is_active</span><span class=\"p\">():</span>\n    <span class=\"n\">primary</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.filter_monitors", "modulename": "screen_brightness_control", "qualname": "filter_monitors", "type": "function", "doc": "<p>Searches through the information for all detected displays\nand attempts to return the info matching the value given.\nWill attempt to match against index, name, model, edid, method and serial</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (str or int):</strong>  the display you are searching for.\nCan be serial, name, model number, edid string or index of the display</li>\n<li><strong>haystack (list):</strong>  the information to filter from.\nIf this isn't set it defaults to the return of <code>list_monitors_info</code></li>\n<li><strong>method (str):</strong>  the method the monitors use. See <code>get_methods</code> for\nmore info on available methods</li>\n<li><strong>include (list):</strong>  extra fields of information to sort by</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  if the display kwarg is not an int, str or None</li>\n<li><strong>LookupError:</strong>  if the display, does not have a match</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of dicts</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"n\">search</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;GL2450H&#39;</span>\n<span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">filter_displays</span><span class=\"p\">(</span><span class=\"n\">search</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"p\">)</span>\n<span class=\"c1\"># EG output: [{&#39;name&#39;: &#39;BenQ GL2450H&#39;, &#39;model&#39;: &#39;GL2450H&#39;, ... }]</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">haystack</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">include</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.helpers", "modulename": "screen_brightness_control.helpers", "type": "module", "doc": "<p>Helper functions for the library</p>\n"}, {"fullname": "screen_brightness_control.helpers.ScreenBrightnessError", "modulename": "screen_brightness_control.helpers", "qualname": "ScreenBrightnessError", "type": "class", "doc": "<p>Generic error class designed to make catching errors under one umbrella easy.\nRaised when the brightness cannot be set/retrieved.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">ScreenBrightnessError</span> <span class=\"k\">as</span> <span class=\"n\">error</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "bases": "builtins.Exception"}, {"fullname": "screen_brightness_control.helpers.ScreenBrightnessError.__init__", "modulename": "screen_brightness_control.helpers", "qualname": "ScreenBrightnessError.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s1\">&#39;Cannot set/retrieve brightness level&#39;</span></span>)</span>"}, {"fullname": "screen_brightness_control.helpers.EDID", "modulename": "screen_brightness_control.helpers", "qualname": "EDID", "type": "class", "doc": "<p>Simple structure and method to extract monitor serial and name from an EDID string.</p>\n\n<p>The EDID parsing was created with inspiration from the <a href=\"https://github.com/jojonas/pyedid\">pyedid library</a></p>\n"}, {"fullname": "screen_brightness_control.helpers.EDID.__init__", "modulename": "screen_brightness_control.helpers", "qualname": "EDID.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "screen_brightness_control.helpers.EDID.EDID_FORMAT", "modulename": "screen_brightness_control.helpers", "qualname": "EDID.EDID_FORMAT", "type": "variable", "doc": "<p>The byte structure for EDID strings</p>\n", "annotation": ": str", "default_value": " = &#x27;&gt;8sHHIBBBBBBBBB10sHB16s18s18s18s18sBB&#x27;"}, {"fullname": "screen_brightness_control.helpers.EDID.parse", "modulename": "screen_brightness_control.helpers", "qualname": "EDID.parse", "type": "function", "doc": "<p>Takes an EDID string and parses some relevant information from it according to the\n<a href=\"https://en.wikipedia.org/wiki/Extended_Display_Identification_Data#EDID_1.4_data_format\">EDID 1.4</a>\nspecification on Wikipedia.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>edid (bytes or str):</strong>  the EDID, can either be raw bytes or\na hex formatted string (00 ff ff ff ff...)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple[str | None]:</strong>  A tuple of 5 items representing the monitor's manufacturer ID,\nmanufacturer, model, name, serial in that order.\nIf any of these values are unable to be determined, they will be None.\nOtherwise, expect a string</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"n\">edid</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">list_monitors_info</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">&#39;edid&#39;</span><span class=\"p\">]</span>\n<span class=\"n\">manufacturer_id</span><span class=\"p\">,</span> <span class=\"n\">manufacturer</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">serial</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">EDID</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">edid</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Manufacturer:&#39;</span><span class=\"p\">,</span> <span class=\"n\">manufacturer_id</span> <span class=\"ow\">or</span> <span class=\"s1\">&#39;Unknown&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Model:&#39;</span><span class=\"p\">,</span> <span class=\"n\">model</span> <span class=\"ow\">or</span> <span class=\"s1\">&#39;Unknown&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Name:&#39;</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"s1\">&#39;Unknown&#39;</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">edid</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.helpers.EDID.hexdump", "modulename": "screen_brightness_control.helpers", "qualname": "EDID.hexdump", "type": "function", "doc": "<p>Returns a hexadecimal string of binary data from a file</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>file (str):</strong>  the file to read</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str:</strong>  one long hex string</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"kn\">import</span> <span class=\"n\">EDID</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">EDID</span><span class=\"o\">.</span><span class=\"n\">hexdump</span><span class=\"p\">(</span><span class=\"s1\">&#39;/sys/class/backlight/intel_backlight/device/edid&#39;</span><span class=\"p\">))</span>\n<span class=\"c1\"># &#39;00ffffffffffff00...&#39;</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.helpers.logarithmic_range", "modulename": "screen_brightness_control.helpers", "qualname": "logarithmic_range", "type": "function", "doc": "<p>A <code>range</code>-like function that returns a sequence of integers following\na logarithmic curve (<code>y = 10 ^ (x / 50)</code>) from <code>start</code> (inclusive) to\n<code>stop</code> (inclusive).</p>\n\n<p>This is useful because it skips many of the higher percentages in the\nsequence where single percent brightness changes are hard to notice.</p>\n\n<p>This function is designed to deal with brightness percentages, and so\nwill never return a value less than 0 or greater than 100.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>start (int):</strong>  the start of your percentage range</li>\n<li><strong>stop (int):</strong>  the end of your percentage range</li>\n<li><strong>step (int):</strong>  the increment per iteration through the sequence</li>\n</ul>\n\n<h6 id=\"yields\">Yields</h6>\n\n<ul>\n<li>int</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">stop</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.helpers.check_output", "modulename": "screen_brightness_control.helpers", "qualname": "check_output", "type": "function", "doc": "<p>Run a command with retry management built in.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>command (list[str]):</strong>  the command to run</li>\n<li><strong>max_retries (int):</strong>  the maximum number of retries to allow before raising an error</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str:</strong>  the command output</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">command</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">max_tries</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.linux", "modulename": "screen_brightness_control.linux", "type": "module", "doc": "<p></p>\n"}, {"fullname": "screen_brightness_control.linux.SysFiles", "modulename": "screen_brightness_control.linux", "qualname": "SysFiles", "type": "class", "doc": "<p>A way of getting display information and adjusting the brightness\nthat does not rely on any 3rd party software.</p>\n\n<p>This class works with displays that show up in the <code>/sys/class/backlight</code>\ndirectory (so usually laptop displays).</p>\n\n<p>To set the brightness, your user will need write permissions for\n<code>/sys/class/backlight/*/brightness</code> or you will need to run the program\nas root.</p>\n"}, {"fullname": "screen_brightness_control.linux.SysFiles.__init__", "modulename": "screen_brightness_control.linux", "qualname": "SysFiles.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "screen_brightness_control.linux.SysFiles.get_display_info", "modulename": "screen_brightness_control.linux", "qualname": "SysFiles.get_display_info", "type": "function", "doc": "<p>Returns information about detected displays by reading files from the\n<code>/sys/class/backlight</code> directory</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (str or int):</strong>  [<em>Optional</em>] The monitor to return info about.\nPass in the serial number, name, model, interface, edid or index.\nThis is passed to <code>filter_monitors</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of dicts</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># get info about all monitors</span>\n<span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">SysFiles</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">()</span>\n<span class=\"c1\"># EG output: [{&#39;name&#39;: &#39;edp-backlight&#39;, &#39;path&#39;: &#39;/sys/class/backlight/edp-backlight&#39;, edid&#39;: &#39;00ffff...&#39;}]</span>\n\n<span class=\"c1\"># get info about the primary monitor</span>\n<span class=\"n\">primary_info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">SysFiles</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># get info about a monitor called &#39;edp-backlight&#39;</span>\n<span class=\"n\">edp_info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">SysFiles</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">(</span><span class=\"s1\">&#39;edp-backlight&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.SysFiles.get_brightness", "modulename": "screen_brightness_control.linux", "qualname": "SysFiles.get_brightness", "type": "function", "doc": "<p>Gets the brightness for a display by reading the brightness files\nstored in <code>/sys/class/backlight/*/brightness</code></p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (int):</strong>  The specific display you wish to query.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of ints (0 to 100)</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># get the current display brightness</span>\n<span class=\"n\">current_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">SysFiles</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># get the brightness of the primary display</span>\n<span class=\"n\">primary_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">SysFiles</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># get the brightness of the secondary display</span>\n<span class=\"n\">secondary_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">SysFiles</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.SysFiles.set_brightness", "modulename": "screen_brightness_control.linux", "qualname": "SysFiles.set_brightness", "type": "function", "doc": "<p>Sets the brightness for a display by writing to the brightness files\nstored in <code>/sys/class/backlight/*/brightness</code>.\nThis function requires permission to write to these files which is\nusually provided when it's run as root.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>value (int):</strong>  Sets the brightness to this value</li>\n<li><strong>display (int):</strong>  The specific display you wish to adjust.</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># set the brightness to 50%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">SysFiles</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the primary display brightness to 75%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">SysFiles</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the secondary display brightness to 25%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">SysFiles</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.I2C", "modulename": "screen_brightness_control.linux", "qualname": "I2C", "type": "class", "doc": "<p>In the same spirit as <code>SysFiles</code>, this class serves as a way of getting\ndisplay information and adjusting the brightness without relying on any\n3rd party software.</p>\n\n<p>Usage of this class requires read and write permission for <code>/dev/i2c-*</code>.</p>\n\n<p>This class works over the I2C bus, primarily with desktop monitors as I\nhaven't tested any e-DP displays yet.</p>\n\n<p>Massive thanks to <a href=\"https://github.com/siemer\">siemer</a> for\nhis work on the <a href=\"https://github.com/siemer/ddcci\">ddcci.py</a> project,\nwhich served as a my main reference for this.</p>\n\n<h6 id=\"references\">References</h6>\n\n<blockquote>\n  <ul>\n  <li><a href=\"https://github.com/siemer/ddcci\">ddcci.py</a></li>\n  <li><a href=\"https://milek7.pl/ddcbacklight/ddcci.pdf\">DDCCI Spec</a></li>\n  </ul>\n</blockquote>\n"}, {"fullname": "screen_brightness_control.linux.I2C.__init__", "modulename": "screen_brightness_control.linux", "qualname": "I2C.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "screen_brightness_control.linux.I2C.GET_VCP_CMD", "modulename": "screen_brightness_control.linux", "qualname": "I2C.GET_VCP_CMD", "type": "variable", "doc": "<p>VCP command to get the value of a feature (eg: brightness)</p>\n", "default_value": " = 1"}, {"fullname": "screen_brightness_control.linux.I2C.GET_VCP_REPLY", "modulename": "screen_brightness_control.linux", "qualname": "I2C.GET_VCP_REPLY", "type": "variable", "doc": "<p>VCP feature reply op code</p>\n", "default_value": " = 2"}, {"fullname": "screen_brightness_control.linux.I2C.SET_VCP_CMD", "modulename": "screen_brightness_control.linux", "qualname": "I2C.SET_VCP_CMD", "type": "variable", "doc": "<p>VCP command to set the value of a feature (eg: brightness)</p>\n", "default_value": " = 3"}, {"fullname": "screen_brightness_control.linux.I2C.DDCCI_ADDR", "modulename": "screen_brightness_control.linux", "qualname": "I2C.DDCCI_ADDR", "type": "variable", "doc": "<p>DDC packets are transmittred using this I2C address</p>\n", "default_value": " = 55"}, {"fullname": "screen_brightness_control.linux.I2C.HOST_ADDR_R", "modulename": "screen_brightness_control.linux", "qualname": "I2C.HOST_ADDR_R", "type": "variable", "doc": "<p>Packet source address (the computer) when reading data</p>\n", "default_value": " = 80"}, {"fullname": "screen_brightness_control.linux.I2C.HOST_ADDR_W", "modulename": "screen_brightness_control.linux", "qualname": "I2C.HOST_ADDR_W", "type": "variable", "doc": "<p>Packet source address (the computer) when writing data</p>\n", "default_value": " = 81"}, {"fullname": "screen_brightness_control.linux.I2C.DESTINATION_ADDR_W", "modulename": "screen_brightness_control.linux", "qualname": "I2C.DESTINATION_ADDR_W", "type": "variable", "doc": "<p>Packet destination address (the monitor) when writing data</p>\n", "default_value": " = 110"}, {"fullname": "screen_brightness_control.linux.I2C.I2C_SLAVE", "modulename": "screen_brightness_control.linux", "qualname": "I2C.I2C_SLAVE", "type": "variable", "doc": "<p>The I2C slave address</p>\n", "default_value": " = 1795"}, {"fullname": "screen_brightness_control.linux.I2C.WAIT_TIME", "modulename": "screen_brightness_control.linux", "qualname": "I2C.WAIT_TIME", "type": "variable", "doc": "<p>How long to wait between I2C commands</p>\n", "default_value": " = 0.05"}, {"fullname": "screen_brightness_control.linux.I2C.I2CDevice", "modulename": "screen_brightness_control.linux", "qualname": "I2C.I2CDevice", "type": "class", "doc": "<p>Class to read and write data to an I2C bus,\nbased on the <code>I2CDev</code> class from <a href=\"https://github.com/siemer/ddcci\">ddcci.py</a></p>\n"}, {"fullname": "screen_brightness_control.linux.I2C.I2CDevice.__init__", "modulename": "screen_brightness_control.linux", "qualname": "I2C.I2CDevice.__init__", "type": "function", "doc": "<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>fname (str):</strong>  the I2C path, eg: <code>/dev/i2c-2</code></li>\n<li><strong>slave_addr (int):</strong>  not entirely sure what this is meant to be</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">slave_addr</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "screen_brightness_control.linux.I2C.I2CDevice.read", "modulename": "screen_brightness_control.linux", "qualname": "I2C.I2CDevice.read", "type": "function", "doc": "<p>Read a certain number of bytes from the I2C bus</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>length (int):</strong>  the number of bytes to read</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li>bytes</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bytes</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.I2C.I2CDevice.write", "modulename": "screen_brightness_control.linux", "qualname": "I2C.I2CDevice.write", "type": "function", "doc": "<p>Writes data to the I2C bus</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (bytes):</strong>  the data to write</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int:</strong>  the number of bytes written</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.I2C.DDCInterface", "modulename": "screen_brightness_control.linux", "qualname": "I2C.DDCInterface", "type": "class", "doc": "<p>Class to send DDC (Display Data Channel) commands to an I2C device,\nbased on the <code>Ddcci</code> and <code>Mccs</code> classes from <a href=\"https://github.com/siemer/ddcci\">ddcci.py</a></p>\n", "bases": "I2C.I2CDevice"}, {"fullname": "screen_brightness_control.linux.I2C.DDCInterface.__init__", "modulename": "screen_brightness_control.linux", "qualname": "I2C.DDCInterface.__init__", "type": "function", "doc": "<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>i2c_path (str):</strong>  the path to the I2C device, eg: <code>/dev/i2c-2</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">i2c_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "screen_brightness_control.linux.I2C.DDCInterface.write", "modulename": "screen_brightness_control.linux", "qualname": "I2C.DDCInterface.write", "type": "function", "doc": "<p>Write some data to the I2C device.</p>\n\n<p>It is recommended to use <code>setvcp</code> to set VCP values on the DDC device\ninstead of using this function directly.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>*args:</strong>  variable length list of arguments. This will be put\ninto a <code>bytearray</code> and wrapped up in various flags and\nchecksums before being written to the I2C device</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int:</strong>  the number of bytes that were written</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.I2C.DDCInterface.setvcp", "modulename": "screen_brightness_control.linux", "qualname": "I2C.DDCInterface.setvcp", "type": "function", "doc": "<p>Set a VCP value on the device</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>vcp_code (int):</strong>  the VCP command to send, eg: <code>0x10</code> is brightness</li>\n<li><strong>value (int):</strong>  what to set the value to</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int:</strong>  the number of bytes written to the device</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vcp_code</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.I2C.DDCInterface.read", "modulename": "screen_brightness_control.linux", "qualname": "I2C.DDCInterface.read", "type": "function", "doc": "<p>Reads data from the DDC device.</p>\n\n<p>It is recommended to use <code>getvcp</code> to retrieve VCP values from the\nDDC device instead of using this function directly.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>amount (int):</strong>  the number of bytes to read</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li>bytes</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  if the read data is deemed invalid</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">amount</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bytes</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.I2C.DDCInterface.getvcp", "modulename": "screen_brightness_control.linux", "qualname": "I2C.DDCInterface.getvcp", "type": "function", "doc": "<p>Retrieves a VCP value from the DDC device.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>vcp_code (int):</strong>  the VCP value to read, eg: <code>0x10</code> is brightness</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple[int, int]:</strong>  the current and maximum value respectively</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  if the read data is deemed invalid</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vcp_code</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.I2C.get_display_info", "modulename": "screen_brightness_control.linux", "qualname": "I2C.get_display_info", "type": "function", "doc": "<p>Returns information about detected displays by querying the various I2C buses</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (str or int):</strong>  [<em>Optional</em>] The monitor to return info about.\nPass in the serial number, name, model, interface, edid or index.\nThis is passed to <code>filter_monitors</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of dicts</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># get info about all monitors</span>\n<span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">I2C</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">()</span>\n<span class=\"c1\"># EG output: [{&#39;name&#39;: &#39;Benq GL2450H&#39;, &#39;model&#39;: &#39;GL2450H&#39;, &#39;manufacturer&#39;: &#39;BenQ&#39;, &#39;edid&#39;: &#39;00ffff...&#39;}]</span>\n\n<span class=\"c1\"># get info about the primary monitor</span>\n<span class=\"n\">primary_info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">I2C</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># get info about a monitor called &#39;Benq GL2450H&#39;</span>\n<span class=\"n\">benq_info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">I2C</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">(</span><span class=\"s1\">&#39;Benq GL2450H&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.I2C.get_brightness", "modulename": "screen_brightness_control.linux", "qualname": "I2C.get_brightness", "type": "function", "doc": "<p>Gets the brightness for a display by querying the I2C bus</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (int):</strong>  The specific display you wish to query.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of ints (0 to 100)</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># get the current display brightness</span>\n<span class=\"n\">current_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">I2C</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># get the brightness of the primary display</span>\n<span class=\"n\">primary_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">I2C</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># get the brightness of the secondary display</span>\n<span class=\"n\">secondary_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">I2C</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.I2C.set_brightness", "modulename": "screen_brightness_control.linux", "qualname": "I2C.set_brightness", "type": "function", "doc": "<p>Sets the brightness for a display by writing to the I2C bus</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>value (int):</strong>  Set the brightness to this value</li>\n<li><strong>display (int):</strong>  The specific display you wish to adjust.</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># set the brightness to 50%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">I2C</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the primary display brightness to 75%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">I2C</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the secondary display brightness to 25%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">I2C</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.Light", "modulename": "screen_brightness_control.linux", "qualname": "Light", "type": "class", "doc": "<p>collection of screen brightness related methods using the light executable</p>\n"}, {"fullname": "screen_brightness_control.linux.Light.__init__", "modulename": "screen_brightness_control.linux", "qualname": "Light.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "screen_brightness_control.linux.Light.executable", "modulename": "screen_brightness_control.linux", "qualname": "Light.executable", "type": "variable", "doc": "<p>the light executable to be called</p>\n", "annotation": ": str", "default_value": " = &#x27;light&#x27;"}, {"fullname": "screen_brightness_control.linux.Light.get_display_info", "modulename": "screen_brightness_control.linux", "qualname": "Light.get_display_info", "type": "function", "doc": "<p>Returns information about detected displays as reported by Light.</p>\n\n<p>It works by taking the output of <code>SysFiles.get_display_info</code> and\nfiltering out any displays that aren't supported by Light</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (str or int):</strong>  [<em>Optional</em>] The monitor to return info about.\nPass in the serial number, name, model, interface, edid or index.\nThis is passed to <code>filter_monitors</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of dicts</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># get info about all monitors</span>\n<span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">Light</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">()</span>\n<span class=\"c1\"># EG output: [{&#39;name&#39;: &#39;edp-backlight&#39;, &#39;path&#39;: &#39;/sys/class/backlight/edp-backlight&#39;, edid&#39;: &#39;00ffff...&#39;}]</span>\n\n<span class=\"c1\"># get info about the primary monitor</span>\n<span class=\"n\">primary_info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">Light</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># get info about a monitor called &#39;edp-backlight&#39;</span>\n<span class=\"n\">edp_info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">Light</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">(</span><span class=\"s1\">&#39;edp-backlight&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.Light.set_brightness", "modulename": "screen_brightness_control.linux", "qualname": "Light.set_brightness", "type": "function", "doc": "<p>Sets the brightness for a display using the light executable</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>value (int):</strong>  Sets the brightness to this value</li>\n<li><strong>display (int):</strong>  The specific display you wish to query.</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># set the brightness to 50%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">Light</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the primary display brightness to 75%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">Light</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the secondary display brightness to 25%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">Light</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.Light.get_brightness", "modulename": "screen_brightness_control.linux", "qualname": "Light.get_brightness", "type": "function", "doc": "<p>Gets the brightness for a display using the light executable</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (int):</strong>  The specific display you wish to query.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of ints (0 to 100)</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># get the current display brightness</span>\n<span class=\"n\">current_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">Light</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># get the brightness of the primary display</span>\n<span class=\"n\">primary_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">Light</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># get the brightness of the secondary display</span>\n<span class=\"n\">edp_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">Light</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.XRandr", "modulename": "screen_brightness_control.linux", "qualname": "XRandr", "type": "class", "doc": "<p>collection of screen brightness related methods using the xrandr executable</p>\n"}, {"fullname": "screen_brightness_control.linux.XRandr.__init__", "modulename": "screen_brightness_control.linux", "qualname": "XRandr.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "screen_brightness_control.linux.XRandr.executable", "modulename": "screen_brightness_control.linux", "qualname": "XRandr.executable", "type": "variable", "doc": "<p>the xrandr executable to be called</p>\n", "annotation": ": str", "default_value": " = &#x27;xrandr&#x27;"}, {"fullname": "screen_brightness_control.linux.XRandr.get_display_info", "modulename": "screen_brightness_control.linux", "qualname": "XRandr.get_display_info", "type": "function", "doc": "<p>Returns info about all detected monitors as reported by xrandr</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (str or int):</strong>  [<em>Optional</em>] The monitor to return info about.\nPass in the serial number, name, model, interface, edid or index.\nThis is passed to <code>filter_monitors</code></li>\n<li><strong>brightness (bool):</strong>  whether to include the current brightness\nin the returned info</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of dicts</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">XRandr</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">info</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;================&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"s1\">&#39;:&#39;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get information about the first XRandr addressable monitor</span>\n<span class=\"n\">primary_info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">XRandr</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># get information about a monitor with a specific name</span>\n<span class=\"n\">benq_info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">XRandr</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">(</span><span class=\"s1\">&#39;BenQ GL2450HM&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">brightness</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.XRandr.get_brightness", "modulename": "screen_brightness_control.linux", "qualname": "XRandr.get_brightness", "type": "function", "doc": "<p>Returns the brightness for a display using the xrandr executable</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (int):</strong>  The specific display you wish to query.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of integers (from 0 to 100)</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># get the current brightness</span>\n<span class=\"n\">current_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">XRandr</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># get the current brightness for the primary display</span>\n<span class=\"n\">primary_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">XRandr</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.XRandr.set_brightness", "modulename": "screen_brightness_control.linux", "qualname": "XRandr.set_brightness", "type": "function", "doc": "<p>Sets the brightness for a display using the xrandr executable</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>value (int):</strong>  Sets the brightness to this value</li>\n<li><strong>display (int):</strong>  The specific display you wish to query.</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># set the brightness to 50</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">XRandr</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the brightness of the primary display to 75</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">XRandr</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"n\">display</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.DDCUtil", "modulename": "screen_brightness_control.linux", "qualname": "DDCUtil", "type": "class", "doc": "<p>collection of screen brightness related methods using the ddcutil executable</p>\n"}, {"fullname": "screen_brightness_control.linux.DDCUtil.__init__", "modulename": "screen_brightness_control.linux", "qualname": "DDCUtil.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "screen_brightness_control.linux.DDCUtil.executable", "modulename": "screen_brightness_control.linux", "qualname": "DDCUtil.executable", "type": "variable", "doc": "<p>the ddcutil executable to be called</p>\n", "annotation": ": str", "default_value": " = &#x27;ddcutil&#x27;"}, {"fullname": "screen_brightness_control.linux.DDCUtil.sleep_multiplier", "modulename": "screen_brightness_control.linux", "qualname": "DDCUtil.sleep_multiplier", "type": "variable", "doc": "<p>how long ddcutil should sleep between each DDC request (lower is shorter).\nSee <a href=\"https://www.ddcutil.com/performance_options/\">the ddcutil docs</a> for more info.</p>\n", "annotation": ": float", "default_value": " = 0.5"}, {"fullname": "screen_brightness_control.linux.DDCUtil.cmd_max_tries", "modulename": "screen_brightness_control.linux", "qualname": "DDCUtil.cmd_max_tries", "type": "variable", "doc": "<p>max number of retries when calling the ddcutil</p>\n", "annotation": ": int", "default_value": " = 10"}, {"fullname": "screen_brightness_control.linux.DDCUtil.get_display_info", "modulename": "screen_brightness_control.linux", "qualname": "DDCUtil.get_display_info", "type": "function", "doc": "<p>Returns information about all DDC compatible monitors shown by DDCUtil\nWorks by calling the command 'ddcutil detect' and parsing the output.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (int or str):</strong>  [<em>Optional</em>] The monitor to return info about.\nPass in the serial number, name, model, i2c bus, edid or index.\nThis is passed to <code>filter_monitors</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of dicts</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">DDCUtil</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">info</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;================&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"s1\">&#39;:&#39;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get information about the first DDCUtil addressable monitor</span>\n<span class=\"n\">primary_info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">DDCUtil</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># get information about a monitor with a specific name</span>\n<span class=\"n\">benq_info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">DDCUtil</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">(</span><span class=\"s1\">&#39;BenQ GL2450HM&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.DDCUtil.get_brightness", "modulename": "screen_brightness_control.linux", "qualname": "DDCUtil.get_brightness", "type": "function", "doc": "<p>Returns the brightness for a display using the ddcutil executable</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (int):</strong>  The specific display you wish to query.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of ints (0 to 100)</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># get the current brightness</span>\n<span class=\"n\">current_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">DDCUtil</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># get the current brightness for the primary display</span>\n<span class=\"n\">primary_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">DDCUtil</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.DDCUtil.set_brightness", "modulename": "screen_brightness_control.linux", "qualname": "DDCUtil.set_brightness", "type": "function", "doc": "<p>Sets the brightness for a display using the ddcutil executable</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>value (int):</strong>  Sets the brightness to this value</li>\n<li><strong>display (int):</strong>  The specific display you wish to query.</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># set the brightness to 50</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">DDCUtil</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the brightness of the primary display to 75</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">DDCUtil</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"n\">display</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.list_monitors_info", "modulename": "screen_brightness_control.linux", "qualname": "list_monitors_info", "type": "function", "doc": "<p>Lists detailed information about all detected monitors</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>method (str):</strong>  the method the monitor can be addressed by. See <code>screen_brightness_control.get_methods</code>\nfor more info on available methods</li>\n<li><strong>allow_duplicates (bool):</strong>  whether to filter out duplicate displays (displays with the same EDID) or not</li>\n<li><strong>unsupported (bool):</strong>  include detected displays that are invalid or unsupported</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of dicts</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  if the method kwarg is invalid</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"n\">monitors</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">list_monitors_info</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">monitor</span> <span class=\"ow\">in</span> <span class=\"n\">monitors</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;=======================&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># the manufacturer name plus the model OR a generic name for the monitor, depending on the method</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Name:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">])</span>\n    <span class=\"c1\"># the general model of the display</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Model:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;model&#39;</span><span class=\"p\">])</span>\n    <span class=\"c1\"># the serial of the display</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Serial:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;serial&#39;</span><span class=\"p\">])</span>\n    <span class=\"c1\"># the name of the brand of the monitor</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Manufacturer:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;manufacturer&#39;</span><span class=\"p\">])</span>\n    <span class=\"c1\"># the 3 letter code corresponding to the brand name, EG: BNQ -&gt; BenQ</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Manufacturer ID:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;manufacturer_id&#39;</span><span class=\"p\">])</span>\n    <span class=\"c1\"># the index of that display FOR THE SPECIFIC METHOD THE DISPLAY USES</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Index:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">])</span>\n    <span class=\"c1\"># the method this monitor can be addressed by</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Method:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;method&#39;</span><span class=\"p\">])</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">allow_duplicates</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">unsupported</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.windows", "modulename": "screen_brightness_control.windows", "type": "module", "doc": "<p></p>\n"}, {"fullname": "screen_brightness_control.windows.enum_display_devices", "modulename": "screen_brightness_control.windows", "qualname": "enum_display_devices", "type": "function", "doc": "<p>Yields all display devices connected to the computer</p>\n\n<h6 id=\"yields\">Yields</h6>\n\n<ul>\n<li>win32api.PyDISPLAY_DEVICEType</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"n\">win32api</span><span class=\"o\">.</span><span class=\"n\">PyDISPLAY_DEVICEType</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.windows.get_display_info", "modulename": "screen_brightness_control.windows", "qualname": "get_display_info", "type": "function", "doc": "<p>Gets information about all connected displays using WMI and win32api</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of dictionaries</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">s</span>\n\n<span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">display</span> <span class=\"ow\">in</span> <span class=\"n\">info</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">display</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">])</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.windows.WMI", "modulename": "screen_brightness_control.windows", "qualname": "WMI", "type": "class", "doc": "<p>A collection of screen brightness related methods using the WMI API.\nThis class primarily works with laptop displays.</p>\n"}, {"fullname": "screen_brightness_control.windows.WMI.__init__", "modulename": "screen_brightness_control.windows", "qualname": "WMI.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "screen_brightness_control.windows.WMI.get_display_info", "modulename": "screen_brightness_control.windows", "qualname": "WMI.get_display_info", "type": "function", "doc": "<p>Returns a list of dictionaries of info about all detected monitors</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (str or int):</strong>  [<em>Optional</em>] the monitor to return info about.\nPass in the serial number, name, model, edid or index</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of dicts</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">WMI</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">info</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;================&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"s1\">&#39;:&#39;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get information about the first WMI addressable monitor</span>\n<span class=\"n\">primary_info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">WMI</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get information about a monitor with a specific name</span>\n<span class=\"n\">benq_info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">WMI</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">(</span><span class=\"s1\">&#39;BenQ GL2450H&#39;</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.windows.WMI.set_brightness", "modulename": "screen_brightness_control.windows", "qualname": "WMI.set_brightness", "type": "function", "doc": "<p>Sets the display brightness for Windows using WMI</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>value (int):</strong>  The percentage to set the brightness to</li>\n<li><strong>display (int):</strong>  The specific display you wish to query.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>LookupError:</strong>  if the given display cannot be found</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># set brightness of WMI addressable monitors to 50%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">WMI</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the primary display brightness to 75%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">WMI</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the brightness of the secondary display to 25%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">WMI</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.windows.WMI.get_brightness", "modulename": "screen_brightness_control.windows", "qualname": "WMI.get_brightness", "type": "function", "doc": "<p>Returns the current display brightness using WMI</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (int):</strong>  The specific display you wish to query.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of integers (0 to 100)</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>LookupError:</strong>  if the given display cannot be found</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># get brightness of all WMI addressable monitors</span>\n<span class=\"n\">current_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">WMI</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">()</span>\n<span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">current_brightness</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;There is only one detected display&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;There are&#39;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">current_brightness</span><span class=\"p\">),</span> <span class=\"s1\">&#39;detected displays&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get the primary display brightness</span>\n<span class=\"n\">primary_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">WMI</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get the brightness of the secondary monitor</span>\n<span class=\"n\">benq_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">WMI</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.windows.VCP", "modulename": "screen_brightness_control.windows", "qualname": "VCP", "type": "class", "doc": "<p>Collection of screen brightness related methods using the DDC/CI commands</p>\n"}, {"fullname": "screen_brightness_control.windows.VCP.__init__", "modulename": "screen_brightness_control.windows", "qualname": "VCP.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "screen_brightness_control.windows.VCP.iter_physical_monitors", "modulename": "screen_brightness_control.windows", "qualname": "VCP.iter_physical_monitors", "type": "function", "doc": "<p>A generator to iterate through all physical monitors\nand then close them again afterwards, yielding their handles.\nIt is not recommended to use this function unless you are familiar with <code>ctypes</code> and <code>windll</code></p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>start (int):</strong>  skip the first X handles</li>\n</ul>\n\n<h6 id=\"yields\">Yields</h6>\n\n<ul>\n<li>ctypes.wintypes.HANDLE</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ctypes.WinError:</strong>  upon failure to enumerate through the monitors</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"n\">wintypes</span><span class=\"o\">.</span><span class=\"n\">HANDLE</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.windows.VCP.get_display_info", "modulename": "screen_brightness_control.windows", "qualname": "VCP.get_display_info", "type": "function", "doc": "<p>Returns a dictionary of info about all detected monitors or a selection of monitors</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (int or str):</strong>  [<em>Optional</em>] the monitor to return info about.\nPass in the serial number, name, model, edid or index</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of dicts</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># get the information about all monitors</span>\n<span class=\"n\">vcp_info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">VCP</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vcp_info</span><span class=\"p\">)</span>\n<span class=\"c1\"># EG output: [{&#39;name&#39;: &#39;BenQ GL2450H&#39;, ... }, {&#39;name&#39;: &#39;Dell U2211H&#39;, ... }]</span>\n\n<span class=\"c1\"># get information about a monitor with this specific model</span>\n<span class=\"n\">bnq_info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">VCP</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">(</span><span class=\"s1\">&#39;GL2450H&#39;</span><span class=\"p\">)</span>\n<span class=\"c1\"># EG output: {&#39;name&#39;: &#39;BenQ GL2450H&#39;, &#39;model&#39;: &#39;GL2450H&#39;, ... }</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.windows.VCP.get_brightness", "modulename": "screen_brightness_control.windows", "qualname": "VCP.get_brightness", "type": "function", "doc": "<p>Retrieve the brightness of all connected displays using the <code>ctypes.windll</code> API</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (int):</strong>  The specific display you wish to query.</li>\n<li><strong>max_tries (int):</strong>  the maximum allowed number of attempts to\nread the VCP output from the monitor</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of ints (0 to 100)</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># Get the brightness for all detected displays</span>\n<span class=\"n\">current_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">VCP</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;There are&#39;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">current_brightness</span><span class=\"p\">),</span> <span class=\"s1\">&#39;detected displays&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get the brightness for the primary display</span>\n<span class=\"n\">primary_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">VCP</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Get the brightness for a secondary display</span>\n<span class=\"n\">secondary_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">VCP</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">max_tries</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.windows.VCP.set_brightness", "modulename": "screen_brightness_control.windows", "qualname": "VCP.set_brightness", "type": "function", "doc": "<p>Sets the brightness for all connected displays using the <code>ctypes.windll</code> API</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (int):</strong>  The specific display you wish to query.</li>\n<li><strong>max_tries (int):</strong>  the maximum allowed number of attempts to\nsend the VCP input to the monitor</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># Set the brightness for all detected displays to 50%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">VCP</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Set the brightness for the primary display to 75%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">VCP</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Set the brightness for a secondary display to 25%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">VCP</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">max_tries</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "screen_brightness_control.windows.list_monitors_info", "modulename": "screen_brightness_control.windows", "qualname": "list_monitors_info", "type": "function", "doc": "<p>Lists detailed information about all detected monitors</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>method (str):</strong>  the method the monitor can be addressed by. See <code>screen_brightness_control.get_methods</code>\nfor more info on available methods</li>\n<li><strong>allow_duplicates (bool):</strong>  whether to filter out duplicate displays (displays with the same EDID) or not</li>\n<li><strong>unsupported (bool):</strong>  include detected displays that are invalid or unsupported.\nThis argument does nothing on Windows</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of dicts upon success, empty list upon failure</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  if the method kwarg is invalid</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"n\">monitors</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">list_monitors_info</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">info</span> <span class=\"ow\">in</span> <span class=\"n\">monitors</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;=======================&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># the manufacturer name plus the model</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Name:&#39;</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">])</span>\n    <span class=\"c1\"># the general model of the display</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Model:&#39;</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;model&#39;</span><span class=\"p\">])</span>\n    <span class=\"c1\"># a unique string assigned by Windows to this display</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Serial:&#39;</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;serial&#39;</span><span class=\"p\">])</span>\n    <span class=\"c1\"># the name of the brand of the monitor</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Manufacturer:&#39;</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;manufacturer&#39;</span><span class=\"p\">])</span>\n    <span class=\"c1\"># the 3 letter code corresponding to the brand name, EG: BNQ -&gt; BenQ</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Manufacturer ID:&#39;</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;manufacturer_id&#39;</span><span class=\"p\">])</span>\n    <span class=\"c1\"># the index of that display FOR THE SPECIFIC METHOD THE DISPLAY USES</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Index:&#39;</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">])</span>\n    <span class=\"c1\"># the method this monitor can be addressed by</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Method:&#39;</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;method&#39;</span><span class=\"p\">])</span>\n    <span class=\"c1\"># the EDID string of the monitor</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;EDID:&#39;</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;edid&#39;</span><span class=\"p\">])</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">allow_duplicates</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">unsupported</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();