[{"fullname": "screen_brightness_control", "modulename": "screen_brightness_control", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "screen_brightness_control.ScreenBrightnessError", "modulename": "screen_brightness_control", "qualname": "ScreenBrightnessError", "type": "class", "doc": "<p>Generic error class designed to make catching errors under one umbrella easy.\nRaised when the brightness cannot be set/retrieved.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">ScreenBrightnessError</span> <span class=\"k\">as</span> <span class=\"n\">error</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span>\n</code></pre></div>\n</blockquote>\n"}, {"fullname": "screen_brightness_control.ScreenBrightnessError.__init__", "modulename": "screen_brightness_control", "qualname": "ScreenBrightnessError.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "message"], "funcdef": "def"}, {"fullname": "screen_brightness_control.Monitor", "modulename": "screen_brightness_control", "qualname": "Monitor", "type": "class", "doc": "<p>A class to manage a single monitor and its relevant information</p>\n"}, {"fullname": "screen_brightness_control.Monitor.__init__", "modulename": "screen_brightness_control", "qualname": "Monitor.__init__", "type": "function", "doc": "<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (int or str):</strong>  the index/name/model name/serial/edid of the display you wish to control.\nIs passed to <code>filter_monitors</code> to decide which display to use</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>LookupError:</strong>  if a matching display could not be found</li>\n<li><strong>TypeError:</strong>  if the given display type is not int or str</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># create a class for the primary monitor and then a specifically named monitor</span>\n<span class=\"n\">primary</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">Monitor</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">benq_monitor</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">Monitor</span><span class=\"p\">(</span><span class=\"s1\">&#39;BenQ GL2450HM&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># check if the benq monitor is the primary one</span>\n<span class=\"k\">if</span> <span class=\"n\">primary</span><span class=\"o\">.</span><span class=\"n\">serial</span> <span class=\"o\">==</span> <span class=\"n\">benq_monitor</span><span class=\"o\">.</span><span class=\"n\">serial</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;BenQ GL2450HM is the primary display&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;The primary display is&#39;</span><span class=\"p\">,</span> <span class=\"n\">primary</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># this class can also be accessed like a dictionary</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">primary</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">benq_monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">])</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["self", "display"], "funcdef": "def"}, {"fullname": "screen_brightness_control.Monitor.serial", "modulename": "screen_brightness_control", "qualname": "Monitor.serial", "type": "variable", "doc": "<p>the serial number of the display or (if serial is not available) an ID assigned by the OS</p>\n"}, {"fullname": "screen_brightness_control.Monitor.name", "modulename": "screen_brightness_control", "qualname": "Monitor.name", "type": "variable", "doc": "<p>the monitors manufacturer name plus its model</p>\n"}, {"fullname": "screen_brightness_control.Monitor.method", "modulename": "screen_brightness_control", "qualname": "Monitor.method", "type": "variable", "doc": "<p>the method by which this monitor can be addressed.\nThis will be a class from either the windows or linux sub-module</p>\n"}, {"fullname": "screen_brightness_control.Monitor.manufacturer", "modulename": "screen_brightness_control", "qualname": "Monitor.manufacturer", "type": "variable", "doc": "<p>the name of the brand of the monitor</p>\n"}, {"fullname": "screen_brightness_control.Monitor.manufacturer_id", "modulename": "screen_brightness_control", "qualname": "Monitor.manufacturer_id", "type": "variable", "doc": "<p>the 3 letter manufacturing code corresponding to the manufacturer name</p>\n"}, {"fullname": "screen_brightness_control.Monitor.model", "modulename": "screen_brightness_control", "qualname": "Monitor.model", "type": "variable", "doc": "<p>the general model of the display</p>\n"}, {"fullname": "screen_brightness_control.Monitor.index", "modulename": "screen_brightness_control", "qualname": "Monitor.index", "type": "variable", "doc": "<p>the index of the monitor FOR THE SPECIFIC METHOD THIS MONITOR USES.</p>\n"}, {"fullname": "screen_brightness_control.Monitor.edid", "modulename": "screen_brightness_control", "qualname": "Monitor.edid", "type": "variable", "doc": "<p>a unique string returned by the monitor that contains its DDC capabilities, serial and name</p>\n"}, {"fullname": "screen_brightness_control.Monitor.get_identifier", "modulename": "screen_brightness_control", "qualname": "Monitor.get_identifier", "type": "function", "doc": "<p>Returns the piece of information used to identify this monitor.\nWill iterate through the EDID, serial, name and index and return the first\nvalue that is not equal to None</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>monitor (dict):</strong>  extract an identifier from this dict instead of the monitor class</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple:</strong>  a key, value pair</li>\n</ul>\n", "parameters": ["self", "monitor"], "funcdef": "def"}, {"fullname": "screen_brightness_control.Monitor.set_brightness", "modulename": "screen_brightness_control", "qualname": "Monitor.set_brightness", "type": "function", "doc": "<p>Sets the brightness for this display. See <code>set_brightness</code> for the full docs</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>value (int):</strong>  the brightness value to set the display to (from 0 to 100)</li>\n<li><strong>no_return (bool):</strong>  if true, this function returns <code>None</code>\nOtherwise it returns the result of <code>Monitor.get_brightness</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int:</strong>  from 0 to 100</li>\n<li><strong>None:</strong>  if <code>no_return==True</code></li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># set the brightness of the primary monitor to 50%</span>\n<span class=\"n\">primary</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">Monitor</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">primary</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["self", "value", "no_return"], "funcdef": "def"}, {"fullname": "screen_brightness_control.Monitor.get_brightness", "modulename": "screen_brightness_control", "qualname": "Monitor.get_brightness", "type": "function", "doc": "<p>Returns the brightness of this display. See <code>get_brightness</code> for the full docs</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>kwargs (dict):</strong>  passed directly to this monitor's brightness method\nThe <code>display</code> kwarg is always overwritten</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int:</strong>  from 0 to 100</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># get the brightness of the primary monitor</span>\n<span class=\"n\">primary</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">Monitor</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">primary_brightness</span> <span class=\"o\">=</span> <span class=\"n\">primary</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">()</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["self", "kwargs"], "funcdef": "def"}, {"fullname": "screen_brightness_control.Monitor.fade_brightness", "modulename": "screen_brightness_control", "qualname": "Monitor.fade_brightness", "type": "function", "doc": "<p>Fades the brightness for this display. See <code>fade_brightness</code> for the full docs</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>args (tuple):</strong>  passed directly to <code>fade_brightness</code></li>\n<li><strong>kwargs (dict):</strong>  passed directly to <code>fade_brightness</code>.\nThe <code>display</code> kwarg is always overwritten.\nThe <code>method</code> kwarg may also be overwritten</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>threading.Thread:</strong>  if the the blocking kwarg is False</li>\n<li><strong>int:</strong>  if the blocking kwarg is True</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># fade the brightness of the primary monitor to 50%</span>\n<span class=\"n\">primary</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">Monitor</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">primary</span><span class=\"o\">.</span><span class=\"n\">fade_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["self", "args", "kwargs"], "funcdef": "def"}, {"fullname": "screen_brightness_control.Monitor.get_info", "modulename": "screen_brightness_control", "qualname": "Monitor.get_info", "type": "function", "doc": "<p>Returns all known information about this monitor instance</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li>dict</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># initialize class for primary monitor</span>\n<span class=\"n\">primary</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">Monitor</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"c1\"># get the info</span>\n<span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">primary</span><span class=\"o\">.</span><span class=\"n\">get_info</span><span class=\"p\">()</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "screen_brightness_control.Monitor.is_active", "modulename": "screen_brightness_control", "qualname": "Monitor.is_active", "type": "function", "doc": "<p>Attempts to retrieve the brightness for this display. If it works the display is deemed active</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool:</strong>  True means active, False means inactive</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"n\">primary</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">Monitor</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">primary</span><span class=\"o\">.</span><span class=\"n\">is_active</span><span class=\"p\">():</span>\n    <span class=\"n\">primary</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "screen_brightness_control.list_monitors_info", "modulename": "screen_brightness_control", "qualname": "list_monitors_info", "type": "function", "doc": "<p>list detailed information about all monitors that are controllable by this library</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>kwargs (dict):</strong>  passed directly to OS relevant monitor list function</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of dictionaries</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n<span class=\"n\">monitors</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">list_monitors_info</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">monitor</span> <span class=\"ow\">in</span> <span class=\"n\">monitors</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;=======================&#39;</span><span class=\"p\">)</span>\n\u2028\n    <span class=\"c1\"># the manufacturer name plus the model</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Name:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">])</span>\n\u2028\n    <span class=\"c1\"># the general model of the display</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Model:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;model&#39;</span><span class=\"p\">])</span>\n\u2028\n    <span class=\"c1\"># a unique string assigned by Windows to this display</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Serial:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;serial&#39;</span><span class=\"p\">])</span>\n\u2028\n    <span class=\"c1\"># the name of the brand of the monitor</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Manufacturer:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;manufacturer&#39;</span><span class=\"p\">])</span>\n\u2028\n    <span class=\"c1\"># the 3 letter code corresponding to the brand name, EG: BNQ -&gt; BenQ</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Manufacturer ID:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;manufacturer_id&#39;</span><span class=\"p\">])</span>\n\u2028\n    <span class=\"c1\"># the index of that display FOR THE SPECIFIC METHOD THE DISPLAY USES</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Index:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">])</span>\n\u2028\n    <span class=\"c1\"># the method this monitor can be addressed by</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Method:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;method&#39;</span><span class=\"p\">])</span>\n\u2028\n    <span class=\"c1\"># the EDID string associated with that monitor</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;EDID:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;edid&#39;</span><span class=\"p\">])</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["kwargs"], "funcdef": "def"}, {"fullname": "screen_brightness_control.list_monitors", "modulename": "screen_brightness_control", "qualname": "list_monitors", "type": "function", "doc": "<p>List the names of all detected monitors</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>kwargs (dict):</strong>  passed directly to OS relevant monitor list function</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of strings</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n<span class=\"n\">monitor_names</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">list_monitors</span><span class=\"p\">()</span>\n<span class=\"c1\"># eg: [&#39;BenQ GL2450H&#39;, &#39;Dell U2211H&#39;]</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["kwargs"], "funcdef": "def"}, {"fullname": "screen_brightness_control.filter_monitors", "modulename": "screen_brightness_control", "qualname": "filter_monitors", "type": "function", "doc": "<p>Searches through the information for all detected displays\nand attempts to return the info matching the value given.\nWill attempt to match against index, name, model, edid, method and serial</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (str or int):</strong>  the display you are searching for.\nCan be serial, name, model number, edid string or index of the display</li>\n<li><strong>haystack (list):</strong>  the information to filter from.\nIf this isn't set it defaults to the return of <code>list_monitors_info</code></li>\n<li><strong>method (str):</strong>  the method the monitors use</li>\n<li><strong>include (list):</strong>  extra fields of information to sort by</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  if the display kwarg is not an int, str or None</li>\n<li><strong>LookupError:</strong>  if the display, does not have a match</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of dicts</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"n\">search</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;GL2450H&#39;</span>\n<span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">filter_displays</span><span class=\"p\">(</span><span class=\"n\">search</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"p\">)</span>\n<span class=\"c1\"># EG output: [{&#39;name&#39;: &#39;BenQ GL2450H&#39;, &#39;model&#39;: &#39;GL2450H&#39;, ... }]</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["display", "haystack", "method", "include"], "funcdef": "def"}, {"fullname": "screen_brightness_control.flatten_list", "modulename": "screen_brightness_control", "qualname": "flatten_list", "type": "function", "doc": "<p>Internal function I use to flatten lists, because I do that often</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>thick_list (list):</strong>  The list to be flattened. Can be as deep as you wish (within recursion limits)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  one dimensional</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n<span class=\"n\">thick_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]]</span>\n<span class=\"n\">flat_list</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">flatten_list</span><span class=\"p\">(</span><span class=\"n\">thick_list</span><span class=\"p\">)</span>\n<span class=\"c1\"># Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["thick_list"], "funcdef": "def"}, {"fullname": "screen_brightness_control.set_brightness", "modulename": "screen_brightness_control", "qualname": "set_brightness", "type": "function", "doc": "<p>Sets the screen brightness</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>value (int or float or str):</strong>  a value 0 to 100. This is a percentage or a string as '+5' or '-5'</li>\n<li><strong>force (bool):</strong>  [Linux Only] if False the brightness will never be set lower than 1.\nThis is because on most displays a brightness of 0 will turn off the backlight.\nIf True, this check is bypassed</li>\n<li><strong>verbose_error (bool):</strong>  boolean value controls the amount of detail error messages will contain</li>\n<li><strong>kwargs (dict):</strong>  passed to the OS relevant brightness method</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of ints (0 to 100)</li>\n<li><strong>int:</strong>  if only one display is affected</li>\n<li><strong>None:</strong>  if the <code>no_return</code> kwarg is specified</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># set brightness to 50%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set brightness to 0%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># increase brightness by 25%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"s1\">&#39;+25&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># decrease brightness by 30%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"s1\">&#39;-30&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the brightness of display 0 to 50%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">display</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["value", "force", "verbose_error", "kwargs"], "funcdef": "def"}, {"fullname": "screen_brightness_control.fade_brightness", "modulename": "screen_brightness_control", "qualname": "fade_brightness", "type": "function", "doc": "<p>A function to somewhat gently fade the screen brightness from <code>start</code> to <code>finish</code></p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>finish (int or str):</strong>  the brightness level to end up on</li>\n<li><strong>start (int or str):</strong>  where the brightness should fade from.\nIf not specified the function starts from the current screen brightness</li>\n<li><strong>interval (float or int):</strong>  the time delay between each step in brightness</li>\n<li><strong>increment (int):</strong>  the amount to change the brightness by per step</li>\n<li><strong>blocking (bool):</strong>  whether this should occur in the main thread (<code>True</code>) or a new daemonic thread (<code>False</code>)</li>\n<li><strong>kwargs (dict):</strong>  passed directly to set_brightness (see <code>set_brightness</code> docs for available kwargs).\nAny compatible kwargs are passed to <code>filter_monitors</code> as well. (eg: display, method...)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of <code>threading.Thread</code> objects if <code>blocking == False</code>,\notherwise it returns the result of <code>get_brightness()</code></li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># fade brightness from the current brightness to 50%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">fade_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># fade the brightness from 25% to 75%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">fade_brightness</span><span class=\"p\">(</span><span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># fade the brightness from the current value to 100% in steps of 10%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">fade_brightness</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">increment</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># fade the brightness from 100% to 90% with time intervals of 0.1 seconds</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">fade_brightness</span><span class=\"p\">(</span><span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># fade the brightness to 100% in a new thread</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">fade_brightness</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">blocking</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["finish", "start", "interval", "increment", "blocking", "kwargs"], "funcdef": "def"}, {"fullname": "screen_brightness_control.get_brightness", "modulename": "screen_brightness_control", "qualname": "get_brightness", "type": "function", "doc": "<p>Returns the current display brightness</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>verbose_error (bool):</strong>  controls the level of detail in the error messages</li>\n<li><strong>kwargs (dict):</strong>  is passed directly to the OS relevant brightness method</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int:</strong>  an integer from 0 to 100 if only one display is detected</li>\n<li><strong>list:</strong>  if there a multiple displays connected it may return a list of integers (invalid monitors return <code>None</code>)</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># get the current screen brightness (for all detected displays)</span>\n<span class=\"n\">current_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># get the brightness of the primary display</span>\n<span class=\"n\">primary_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get the brightness of the secondary display (if connected)</span>\n<span class=\"n\">secondary_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["verbose_error", "kwargs"], "funcdef": "def"}, {"fullname": "screen_brightness_control.linux", "modulename": "screen_brightness_control.linux", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "screen_brightness_control.linux.Light", "modulename": "screen_brightness_control.linux", "qualname": "Light", "type": "class", "doc": "<p>collection of screen brightness related methods using the light executable</p>\n"}, {"fullname": "screen_brightness_control.linux.Light.__init__", "modulename": "screen_brightness_control.linux", "qualname": "Light.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.Light.executable", "modulename": "screen_brightness_control.linux", "qualname": "Light.executable", "type": "variable", "doc": "<p>the light executable to be called</p>\n"}, {"fullname": "screen_brightness_control.linux.Light.get_display_info", "modulename": "screen_brightness_control.linux", "qualname": "Light.get_display_info", "type": "function", "doc": "<p>Returns information about detected displays as reported by Light</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (str or int):</strong>  [<em>Optional</em>] The monitor to return info about.\nPass in the serial number, name, model, interface, edid or index.\nThis is passed to <code>filter_monitors</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of dicts</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># get info about all monitors</span>\n<span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">Light</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">()</span>\n<span class=\"c1\"># EG output: [{&#39;name&#39;: &#39;edp-backlight&#39;, &#39;path&#39;: &#39;/sys/class/backlight/edp-backlight&#39;, edid&#39;: &#39;00ffff...&#39;}]</span>\n\n<span class=\"c1\"># get info about the primary monitor</span>\n<span class=\"n\">primary_info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">Light</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># get info about a monitor called &#39;edp-backlight&#39;</span>\n<span class=\"n\">edp_info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">Light</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">(</span><span class=\"s1\">&#39;edp-backlight&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["cls", "display"], "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.Light.get_display_names", "modulename": "screen_brightness_control.linux", "qualname": "Light.get_display_names", "type": "function", "doc": "<p>Returns the names of each display, as reported by light</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of strings</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">Light</span><span class=\"o\">.</span><span class=\"n\">get_display_names</span><span class=\"p\">()</span>\n<span class=\"c1\"># EG output: [&#39;edp-backlight&#39;]</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["cls"], "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.Light.set_brightness", "modulename": "screen_brightness_control.linux", "qualname": "Light.set_brightness", "type": "function", "doc": "<p>Sets the brightness for a display using the light executable</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>value (int):</strong>  Sets the brightness to this value</li>\n<li><strong>display (int or str):</strong>  The specific display you wish to query.\nCan be index, name, model, serial, path or edid string.\n<code>int</code> is faster as it isn't passed to <code>filter_monitors</code> to be matched against.\n<code>str</code> is slower as it is passed to <code>filter_monitors</code> to match to a display.</li>\n<li><strong>no_return (bool):</strong>  if True, this function returns None</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of ints (0 to 100) (the result of <code>Light.get_brightness</code>)</li>\n<li><strong>None:</strong>  if the <code>no_return</code> kwarg is True</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># set the brightness to 50%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">Light</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the primary display brightness to 75%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">Light</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the display called &#39;edp-backlight&#39; to 25%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">Light</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;edp-backlight&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["cls", "value", "display", "no_return"], "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.Light.get_brightness", "modulename": "screen_brightness_control.linux", "qualname": "Light.get_brightness", "type": "function", "doc": "<p>Sets the brightness for a display using the light executable</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (int or str):</strong>  The specific display you wish to query.\nCan be index, name, model, serial, path or edid string.\n<code>int</code> is faster as it isn't passed to <code>filter_monitors</code> to be matched against.\n<code>str</code> is slower as it is passed to <code>filter_monitors</code> to match to a display.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of ints (0 to 100)</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># get the current display brightness</span>\n<span class=\"n\">current_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">Light</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># get the brightness of the primary display</span>\n<span class=\"n\">primary_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">Light</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># get the brightness of the display called &#39;edp-backlight&#39;</span>\n<span class=\"n\">edp_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">Light</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;edp-backlight&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["cls", "display"], "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.XBacklight", "modulename": "screen_brightness_control.linux", "qualname": "XBacklight", "type": "class", "doc": "<p>collection of screen brightness related methods using the xbacklight executable</p>\n"}, {"fullname": "screen_brightness_control.linux.XBacklight.__init__", "modulename": "screen_brightness_control.linux", "qualname": "XBacklight.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.XBacklight.executable", "modulename": "screen_brightness_control.linux", "qualname": "XBacklight.executable", "type": "variable", "doc": "<p>the xbacklight executable to be called</p>\n"}, {"fullname": "screen_brightness_control.linux.XBacklight.set_brightness", "modulename": "screen_brightness_control.linux", "qualname": "XBacklight.set_brightness", "type": "function", "doc": "<p>Sets the screen brightness to a supplied value</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>no_return (bool):</strong>  if True, this function returns None\nReturns the result of <code>XBacklight.get_brightness()</code> otherwise</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int:</strong>  from 0 to 100</li>\n<li><strong>None:</strong>  if <code>no_return</code> is set to <code>True</code></li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># set the brightness to 100%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">XBacklight</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["cls", "value", "no_return", "kwargs"], "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.XBacklight.get_brightness", "modulename": "screen_brightness_control.linux", "qualname": "XBacklight.get_brightness", "type": "function", "doc": "<p>Returns the screen brightness as reported by xbacklight</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int:</strong>  from 0 to 100</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"n\">current_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">XBacklight</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">()</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["cls", "kwargs"], "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.XRandr", "modulename": "screen_brightness_control.linux", "qualname": "XRandr", "type": "class", "doc": "<p>collection of screen brightness related methods using the xrandr executable</p>\n"}, {"fullname": "screen_brightness_control.linux.XRandr.__init__", "modulename": "screen_brightness_control.linux", "qualname": "XRandr.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.XRandr.executable", "modulename": "screen_brightness_control.linux", "qualname": "XRandr.executable", "type": "variable", "doc": "<p>the xrandr executable to be called</p>\n"}, {"fullname": "screen_brightness_control.linux.XRandr.get_display_info", "modulename": "screen_brightness_control.linux", "qualname": "XRandr.get_display_info", "type": "function", "doc": "<p>Returns info about all detected monitors as reported by xrandr</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (str or int):</strong>  [<em>Optional</em>] The monitor to return info about.\nPass in the serial number, name, model, interface, edid or index.\nThis is passed to <code>filter_monitors</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of dicts</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">XRandr</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">info</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;================&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"s1\">&#39;:&#39;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get information about the first XRandr addressable monitor</span>\n<span class=\"n\">primary_info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">XRandr</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># get information about a monitor with a specific name</span>\n<span class=\"n\">benq_info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">XRandr</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">(</span><span class=\"s1\">&#39;BenQ GL2450HM&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["cls", "display"], "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.XRandr.get_display_interfaces", "modulename": "screen_brightness_control.linux", "qualname": "XRandr.get_display_interfaces", "type": "function", "doc": "<p>Returns the interfaces of each display, as reported by xrandr</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of strings</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">XRandr</span><span class=\"o\">.</span><span class=\"n\">get_display_names</span><span class=\"p\">()</span>\n<span class=\"c1\"># EG output: [&#39;eDP-1&#39;, &#39;HDMI1&#39;, &#39;HDMI2&#39;]</span>\n</code></pre></div>\n</blockquote>\n", "parameters": [], "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.XRandr.get_display_names", "modulename": "screen_brightness_control.linux", "qualname": "XRandr.get_display_names", "type": "function", "doc": "<p>Returns the names of each display, as reported by xrandr</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of strings</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">XRandr</span><span class=\"o\">.</span><span class=\"n\">get_display_names</span><span class=\"p\">()</span>\n<span class=\"c1\"># EG output: [&#39;BenQ GL2450HM&#39;, &#39;Dell U2211H&#39;]</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["cls"], "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.XRandr.get_brightness", "modulename": "screen_brightness_control.linux", "qualname": "XRandr.get_brightness", "type": "function", "doc": "<p>Returns the brightness for a display using the xrandr executable</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (int or str):</strong>  The specific display you wish to query.\nCan be index, name, model, serial, interface or edid string.\n<code>int</code> is faster as it isn't passed to <code>filter_monitors</code> to be matched against.\n<code>str</code> is slower as it is passed to <code>filter_monitors</code> to match to a display.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of integers (from 0 to 100)</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># get the current brightness</span>\n<span class=\"n\">current_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">XRandr</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># get the current brightness for the primary display</span>\n<span class=\"n\">primary_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">XRandr</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["cls", "display"], "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.XRandr.set_brightness", "modulename": "screen_brightness_control.linux", "qualname": "XRandr.set_brightness", "type": "function", "doc": "<p>Sets the brightness for a display using the xrandr executable</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>value (int):</strong>  Sets the brightness to this value</li>\n<li><strong>display (int):</strong>  The specific display you wish to query.\nCan be index, name, model, serial, interface or edid string.\n<code>int</code> is faster as it isn't passed to <code>filter_monitors</code> to be matched against.\n<code>str</code> is slower as it is passed to <code>filter_monitors</code> to match to a display.</li>\n<li><strong>no_return (bool):</strong>  if True, this function returns None\nReturns the result of <code>XRandr.get_brightness()</code> otherwise</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of ints (0 to 100) (the result of <code>XRandr.get_brightness</code>)</li>\n<li><strong>None:</strong>  if the <code>no_return</code> kwarg is True</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># set the brightness to 50</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">XRandr</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the brightness of the primary display to 75</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">XRandr</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"n\">display</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["cls", "value", "display", "no_return"], "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.DDCUtil", "modulename": "screen_brightness_control.linux", "qualname": "DDCUtil", "type": "class", "doc": "<p>collection of screen brightness related methods using the ddcutil executable</p>\n"}, {"fullname": "screen_brightness_control.linux.DDCUtil.__init__", "modulename": "screen_brightness_control.linux", "qualname": "DDCUtil.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.DDCUtil.executable", "modulename": "screen_brightness_control.linux", "qualname": "DDCUtil.executable", "type": "variable", "doc": "<p>the ddcutil executable to be called</p>\n"}, {"fullname": "screen_brightness_control.linux.DDCUtil.sleep_multiplier", "modulename": "screen_brightness_control.linux", "qualname": "DDCUtil.sleep_multiplier", "type": "variable", "doc": "<p>how long ddcutil should sleep between each DDC request (lower is shorter).\nSee <a href=\"https://www.ddcutil.com/performance_options/\">the ddcutil docs</a> for more info.</p>\n"}, {"fullname": "screen_brightness_control.linux.DDCUtil.get_display_info", "modulename": "screen_brightness_control.linux", "qualname": "DDCUtil.get_display_info", "type": "function", "doc": "<p>Returns information about all DDC compatible monitors shown by DDCUtil\nWorks by calling the command 'ddcutil detect' and parsing the output.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (int or str):</strong>  [<em>Optional</em>] The monitor to return info about.\nPass in the serial number, name, model, i2c bus, edid or index.\nThis is passed to <code>filter_monitors</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of dicts</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">DDCUtil</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">info</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;================&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"s1\">&#39;:&#39;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get information about the first DDCUtil addressable monitor</span>\n<span class=\"n\">primary_info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">DDCUtil</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># get information about a monitor with a specific name</span>\n<span class=\"n\">benq_info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">DDCUtil</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">(</span><span class=\"s1\">&#39;BenQ GL2450HM&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["cls", "display"], "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.DDCUtil.get_display_names", "modulename": "screen_brightness_control.linux", "qualname": "DDCUtil.get_display_names", "type": "function", "doc": "<p>Returns the names of each display, as reported by ddcutil</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of strings</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">DDCUtil</span><span class=\"o\">.</span><span class=\"n\">get_display_names</span><span class=\"p\">()</span>\n<span class=\"c1\"># EG output: [&#39;Dell U2211H&#39;, &#39;BenQ GL2450H&#39;]</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["cls"], "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.DDCUtil.get_brightness", "modulename": "screen_brightness_control.linux", "qualname": "DDCUtil.get_brightness", "type": "function", "doc": "<p>Returns the brightness for a display using the ddcutil executable</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (int or str):</strong>  The specific display you wish to query.\nCan be index, name, model, serial, i2c bus or edid string.\n<code>int</code> is faster as it isn't passed to <code>filter_monitors</code> to be matched against.\n<code>str</code> is slower as it is passed to <code>filter_monitors</code> to match to a display.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of ints (0 to 100)</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># get the current brightness</span>\n<span class=\"n\">current_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">DDCUtil</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># get the current brightness for the primary display</span>\n<span class=\"n\">primary_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">DDCUtil</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["cls", "display"], "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.DDCUtil.set_brightness", "modulename": "screen_brightness_control.linux", "qualname": "DDCUtil.set_brightness", "type": "function", "doc": "<p>Sets the brightness for a display using the ddcutil executable</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>value (int):</strong>  Sets the brightness to this value</li>\n<li><strong>display (int or str):</strong>  The specific display you wish to query.\nCan be index, name, model, serial, i2c bus or edid string.\n<code>int</code> is faster as it isn't passed to <code>filter_monitors</code> to be matched against.\n<code>str</code> is slower as it is passed to <code>filter_monitors</code> to match to a display.</li>\n<li><strong>no_return (bool):</strong>  if True, this function returns None.\nReturns the result of <code>DDCUtil.get_brightness()</code> otherwise</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of ints (0 to 100)</li>\n<li><strong>None:</strong>  if <code>no_return</code> is True</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># set the brightness to 50</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">DDCUtil</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the brightness of the primary display to 75</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">DDCUtil</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"n\">display</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["cls", "value", "display", "no_return"], "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.list_monitors_info", "modulename": "screen_brightness_control.linux", "qualname": "list_monitors_info", "type": "function", "doc": "<p>Lists detailed information about all detected monitors</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>method (str):</strong>  the method the monitor can be addressed by. Can be 'xrandr' or 'ddcutil' or 'light'</li>\n<li><strong>allow_duplicates (bool):</strong>  whether to filter out duplicate displays (displays with the same EDID) or not</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of dicts</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  if the method kwarg is invalid</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"n\">monitors</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">list_monitors_info</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">monitor</span> <span class=\"ow\">in</span> <span class=\"n\">monitors</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;=======================&#39;</span><span class=\"p\">)</span>\n\u2028\n    <span class=\"c1\"># the manufacturer name plus the model OR a generic name for the monitor, depending on the method</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Name:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">])</span>\n\u2028\n    <span class=\"c1\"># the general model of the display</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Model:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;model&#39;</span><span class=\"p\">])</span>\n\u2028\n    <span class=\"c1\"># a unique string assigned by Windows to this display</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Serial:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;serial&#39;</span><span class=\"p\">])</span>\n\u2028\n    <span class=\"c1\"># the name of the brand of the monitor</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Manufacturer:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;manufacturer&#39;</span><span class=\"p\">])</span>\n\u2028\n    <span class=\"c1\"># the 3 letter code corresponding to the brand name, EG: BNQ -&gt; BenQ</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Manufacturer ID:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;manufacturer_id&#39;</span><span class=\"p\">])</span>\n\u2028\n    <span class=\"c1\"># the index of that display FOR THE SPECIFIC METHOD THE DISPLAY USES</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Index:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">])</span>\n\u2028\n    <span class=\"c1\"># the method this monitor can be addressed by</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Method:&#39;</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"p\">[</span><span class=\"s1\">&#39;method&#39;</span><span class=\"p\">])</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["method", "allow_duplicates"], "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.list_monitors", "modulename": "screen_brightness_control.linux", "qualname": "list_monitors", "type": "function", "doc": "<p>Returns the names of all detected monitors</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>method (str):</strong>  the method the monitor can be addressed by. Can be 'xrandr' or 'ddcutil' or 'light'</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of strings</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"n\">monitors</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">list_monitors</span><span class=\"p\">()</span>\n<span class=\"c1\"># EG output: [&#39;BenQ GL2450HM&#39;, &#39;Dell U2211H&#39;, &#39;edp-backlight&#39;]</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["method"], "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.get_brightness_from_sysfiles", "modulename": "screen_brightness_control.linux", "qualname": "get_brightness_from_sysfiles", "type": "function", "doc": "<p>Returns the current display brightness by reading files from <code>/sys/class/backlight</code></p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (int):</strong>  The index of the display you wish to query</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int:</strong>  from 0 to 100</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception:</strong>  if no values could be obtained from reading <code>/sys/class/backlight</code></li>\n<li><strong>FileNotFoundError:</strong>  if the <code>/sys/class/backlight</code> directory doesn't exist or it is empty</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"n\">brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">get_brightness_from_sysfiles</span><span class=\"p\">()</span>\n<span class=\"c1\"># Eg Output: 100</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["display"], "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.set_brightness", "modulename": "screen_brightness_control.linux", "qualname": "set_brightness", "type": "function", "doc": "<p>Sets the brightness for a display, cycles through Light, XRandr, DDCUtil and XBacklight methods until one works</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>value (int):</strong>  Sets the brightness to this value</li>\n<li><strong>display (int or str):</strong>  The specific display you wish to adjust.\nCan be index, model, name or serial of the display.\nCan also be i2c bus (ddcutil), interface (xrandr) or path (light)</li>\n<li><strong>method (str):</strong>  the method to use ('light', 'xrandr', 'ddcutil' or 'xbacklight')</li>\n<li><strong>kwargs (dict):</strong>  passed directly to the chosen brightness method</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of ints (0 to 100)</li>\n<li><strong>int:</strong>  int (0 to 100) if the method is 'XBacklight'</li>\n<li><strong>None:</strong>  if <code>no_return</code> is True</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  if you pass in an invalid value for <code>method</code></li>\n<li><strong>LookupError:</strong>  if the chosen display or method is not found</li>\n<li><strong>TypeError:</strong>  if the value given for <code>display</code> is not int or str</li>\n<li><strong>Exception:</strong>  if the brightness could not be obtained by any method</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># set brightness to 50%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set brightness of the primary display to 75%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"n\">display</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the brightness to 25% via the XRandr method</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;xrandr&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["value", "display", "method", "kwargs"], "funcdef": "def"}, {"fullname": "screen_brightness_control.linux.get_brightness", "modulename": "screen_brightness_control.linux", "qualname": "get_brightness", "type": "function", "doc": "<p>Returns the brightness for a display, cycles through Light, XRandr, DDCUtil and XBacklight methods until one works</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (int or str):</strong>  The specific display you wish to adjust.\nCan be index, model, name or serial of the display.\nCan also be i2c bus (ddcutil), interface (xrandr) or path (light)</li>\n<li><strong>method (str):</strong>  the method to use ('light', 'xrandr', 'ddcutil' or 'xbacklight')</li>\n<li><strong>kwargs (dict):</strong>  passed directly to chosen brightness method</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of ints (0 to 100)</li>\n<li><strong>int:</strong>  int (0 to 100) if the method is 'XBacklight'</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  if you pass in an invalid value for <code>method</code></li>\n<li><strong>LookupError:</strong>  if the chosen display or method is not found</li>\n<li><strong>TypeError:</strong>  if the value given for <code>display</code> is not int or str</li>\n<li><strong>Exception:</strong>  if the brightness could not be obtained by any method</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># get the current screen brightness</span>\n<span class=\"n\">current_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># get the brightness of the primary display</span>\n<span class=\"n\">primary_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># get the brightness via the XRandr method</span>\n<span class=\"n\">xrandr_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;xrandr&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get the brightness of the secondary display using Light</span>\n<span class=\"n\">light_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;light&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["display", "method", "kwargs"], "funcdef": "def"}, {"fullname": "screen_brightness_control.windows", "modulename": "screen_brightness_control.windows", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "screen_brightness_control.windows.get_display_info", "modulename": "screen_brightness_control.windows", "qualname": "get_display_info", "type": "function", "doc": "<p>Gets information about all connected displays using WMI and win32api</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of dictionaries</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">s</span>\n\n<span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">display</span> <span class=\"ow\">in</span> <span class=\"n\">info</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">display</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">])</span>\n</code></pre></div>\n</blockquote>\n", "parameters": [], "funcdef": "def"}, {"fullname": "screen_brightness_control.windows.WMI", "modulename": "screen_brightness_control.windows", "qualname": "WMI", "type": "class", "doc": "<p>A collection of screen brightness related methods using the WMI API.\nThis class primarily works with laptop displays.</p>\n"}, {"fullname": "screen_brightness_control.windows.WMI.__init__", "modulename": "screen_brightness_control.windows", "qualname": "WMI.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "screen_brightness_control.windows.WMI.get_display_info", "modulename": "screen_brightness_control.windows", "qualname": "WMI.get_display_info", "type": "function", "doc": "<p>Returns a list of dictionaries of info about all detected monitors</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (str or int):</strong>  [<em>Optional</em>] the monitor to return info about.\nPass in the serial number, name, model, edid or index</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of dicts</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">WMI</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">info</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;================&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"s1\">&#39;:&#39;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get information about the first WMI addressable monitor</span>\n<span class=\"n\">primary_info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">WMI</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get information about a monitor with a specific name</span>\n<span class=\"n\">benq_info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">WMI</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">(</span><span class=\"s1\">&#39;BenQ GL2450H&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["cls", "display"], "funcdef": "def"}, {"fullname": "screen_brightness_control.windows.WMI.get_display_names", "modulename": "screen_brightness_control.windows", "qualname": "WMI.get_display_names", "type": "function", "doc": "<p>Returns names of all displays that can be addressed by WMI</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of strings</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">WMI</span><span class=\"o\">.</span><span class=\"n\">get_display_names</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["cls"], "funcdef": "def"}, {"fullname": "screen_brightness_control.windows.WMI.set_brightness", "modulename": "screen_brightness_control.windows", "qualname": "WMI.set_brightness", "type": "function", "doc": "<p>Sets the display brightness for Windows using WMI</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>value (int):</strong>  The percentage to set the brightness to</li>\n<li><strong>display (int or str):</strong>  The specific display you wish to query.\nCan be index, name, model, serial or edid string.\n<code>int</code> is faster as it isn't passed to <code>filter_monitors</code> to be matched against.\n<code>str</code> is slower as it is passed to <code>filter_monitors</code> to match to a display.</li>\n<li><strong>no_return (bool):</strong>  if True, this function returns None\nOtherwise it returns the result of <code>WMI.get_brightness()</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of integers (0 to 100)</li>\n<li><strong>None:</strong>  if <code>no_return</code> is set to <code>True</code></li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>LookupError:</strong>  if the given display cannot be found</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># set brightness of WMI addressable monitors to 50%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">WMI</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the primary display brightness to 75%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">WMI</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the brightness of a named monitor to 25%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">WMI</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;BenQ GL2450H&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["cls", "value", "display", "no_return"], "funcdef": "def"}, {"fullname": "screen_brightness_control.windows.WMI.get_brightness", "modulename": "screen_brightness_control.windows", "qualname": "WMI.get_brightness", "type": "function", "doc": "<p>Returns the current display brightness using WMI</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (int or str):</strong>  The specific display you wish to query.\nCan be index, name, model, serial or edid string.\n<code>int</code> is faster as it isn't passed to <code>filter_monitors</code> to be matched against.\n<code>str</code> is slower as it is passed to <code>filter_monitors</code> to match to a display.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of integers (0 to 100)</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>LookupError:</strong>  if the given display cannot be found</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># get brightness of all WMI addressable monitors</span>\n<span class=\"n\">current_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">WMI</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">()</span>\n<span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">current_brightness</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;There is only one detected display&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;There are&#39;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">current_brightness</span><span class=\"p\">),</span> <span class=\"s1\">&#39;detected displays&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get the primary display brightness</span>\n<span class=\"n\">primary_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">WMI</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get the brightness of a named monitor</span>\n<span class=\"n\">benq_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">WMI</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;BenQ GL2450H&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["cls", "display"], "funcdef": "def"}, {"fullname": "screen_brightness_control.windows.VCP", "modulename": "screen_brightness_control.windows", "qualname": "VCP", "type": "class", "doc": "<p>Collection of screen brightness related methods using the DDC/CI commands</p>\n"}, {"fullname": "screen_brightness_control.windows.VCP.__init__", "modulename": "screen_brightness_control.windows", "qualname": "VCP.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "screen_brightness_control.windows.VCP.iter_physical_monitors", "modulename": "screen_brightness_control.windows", "qualname": "VCP.iter_physical_monitors", "type": "function", "doc": "<p>A generator to iterate through all physical monitors\nand then close them again afterwards, yielding their handles.\nIt is not recommended to use this function unless you are familiar with <code>ctypes</code> and <code>windll</code></p>\n\n<h6 id=\"yields\">Yields</h6>\n\n<ul>\n<li>ctypes.wintypes.HANDLE</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ctypes.WinError:</strong>  upon failure to enumerate through the monitors</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"k\">for</span> <span class=\"n\">monitor</span> <span class=\"ow\">in</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">VCP</span><span class=\"o\">.</span><span class=\"n\">iter_physical_monitors</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">VCP</span><span class=\"o\">.</span><span class=\"n\">get_monitor_caps</span><span class=\"p\">(</span><span class=\"n\">monitor</span><span class=\"p\">))</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["cls"], "funcdef": "def"}, {"fullname": "screen_brightness_control.windows.VCP.get_display_info", "modulename": "screen_brightness_control.windows", "qualname": "VCP.get_display_info", "type": "function", "doc": "<p>Returns a dictionary of info about all detected monitors or a selection of monitors</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (int or str):</strong>  [<em>Optional</em>] the monitor to return info about.\nPass in the serial number, name, model, edid or index</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of dicts</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># get the information about all monitors</span>\n<span class=\"n\">vcp_info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">VCP</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vcp_info</span><span class=\"p\">)</span>\n<span class=\"c1\"># EG output: [{&#39;name&#39;: &#39;BenQ GL2450H&#39;, ... }, {&#39;name&#39;: &#39;Dell U2211H&#39;, ... }]</span>\n\n<span class=\"c1\"># get information about a monitor with this specific model</span>\n<span class=\"n\">bnq_info</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">VCP</span><span class=\"o\">.</span><span class=\"n\">get_display_info</span><span class=\"p\">(</span><span class=\"s1\">&#39;GL2450H&#39;</span><span class=\"p\">)</span>\n<span class=\"c1\"># EG output: {&#39;name&#39;: &#39;BenQ GL2450H&#39;, &#39;model&#39;: &#39;GL2450H&#39;, ... }</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["cls", "display"], "funcdef": "def"}, {"fullname": "screen_brightness_control.windows.VCP.get_monitor_caps", "modulename": "screen_brightness_control.windows", "qualname": "VCP.get_monitor_caps", "type": "function", "doc": "<p>Fetches and returns the VCP capabilities string of a monitor.\nThis function takes anywhere from 1-2 seconds to run</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>monitor:</strong>  a monitor handle as returned by <code>VCP.iter_physical_monitors()</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str:</strong>  a string of the monitor's capabilities</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"k\">for</span> <span class=\"n\">monitor</span> <span class=\"ow\">in</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">VCP</span><span class=\"o\">.</span><span class=\"n\">iter_physical_monitors</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">VCP</span><span class=\"o\">.</span><span class=\"n\">get_monitor_caps</span><span class=\"p\">(</span><span class=\"n\">monitor</span><span class=\"p\">))</span>\n<span class=\"c1\"># EG output: &#39;(prot(monitor)type(LCD)model(GL2450HM)cmds(01 02 03 07 0C F3)vcp(02...)&#39;</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["monitor"], "funcdef": "def"}, {"fullname": "screen_brightness_control.windows.VCP.get_display_names", "modulename": "screen_brightness_control.windows", "qualname": "VCP.get_display_names", "type": "function", "doc": "<p>Return the names of each detected monitor</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of strings</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">VCP</span><span class=\"o\">.</span><span class=\"n\">get_display_names</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">)</span>\n<span class=\"c1\"># EG output: [&#39;BenQ GL2450H&#39;, &#39;Dell U2211H&#39;]</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["cls"], "funcdef": "def"}, {"fullname": "screen_brightness_control.windows.VCP.get_brightness", "modulename": "screen_brightness_control.windows", "qualname": "VCP.get_brightness", "type": "function", "doc": "<p>Retrieve the brightness of all connected displays using the <code>ctypes.windll</code> API</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (int or str):</strong>  The specific display you wish to query.\nCan be index, name, model, serial or edid string.\n<code>int</code> is faster as it isn't passed to <code>filter_monitors</code> to be matched against.\n<code>str</code> is slower as it is passed to <code>filter_monitors</code> to match to a display.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of ints (0 to 100)</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># Get the brightness for all detected displays</span>\n<span class=\"n\">current_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">VCP</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;There are&#39;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">current_brightness</span><span class=\"p\">),</span> <span class=\"s1\">&#39;detected displays&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get the brightness for the primary display</span>\n<span class=\"n\">primary_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">VCP</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Get the brightness for a secondary display</span>\n<span class=\"n\">secondary_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">VCP</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Get the brightness for a display with the model &#39;GL2450H&#39;</span>\n<span class=\"n\">benq_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">VCP</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;GL2450H&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["cls", "display"], "funcdef": "def"}, {"fullname": "screen_brightness_control.windows.VCP.set_brightness", "modulename": "screen_brightness_control.windows", "qualname": "VCP.set_brightness", "type": "function", "doc": "<p>Sets the brightness for all connected displays using the <code>ctypes.windll</code> API</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (int or str):</strong>  The specific display you wish to query.\nCan be index, name, model, serial or edid string.\n<code>int</code> is faster as it isn't passed to <code>filter_monitors</code> to be matched against.\n<code>str</code> is slower as it is passed to <code>filter_monitors</code> to match to a display.</li>\n<li><strong>no_return (bool):</strong>  if set to <code>True</code> this function will return <code>None</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of ints (0 to 100) (the result of <code>VCP.get_brightness</code>) if <code>no_return</code> is False</li>\n<li><strong>None:</strong>  if <code>no_return</code> is True</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># Set the brightness for all detected displays to 50%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">VCP</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Set the brightness for the primary display to 75%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">VCP</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Set the brightness for a secondary display to 25%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">VCP</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Set the brightness for a display with the model &#39;GL2450H&#39; to 100%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">VCP</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;GL2450H&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["cls", "value", "display", "no_return"], "funcdef": "def"}, {"fullname": "screen_brightness_control.windows.list_monitors_info", "modulename": "screen_brightness_control.windows", "qualname": "list_monitors_info", "type": "function", "doc": "<p>Lists detailed information about all detected monitors</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>method (str):</strong>  the method the monitor can be addressed by. Can be 'wmi' or 'vcp'</li>\n<li><strong>allow_duplicates (bool):</strong>  whether to filter out duplicate displays (displays with the same EDID) or not</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of dicts upon success, empty list upon failure</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  if the method kwarg is invalid</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"n\">monitors</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">list_monitors_info</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">info</span> <span class=\"ow\">in</span> <span class=\"n\">monitors</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;=======================&#39;</span><span class=\"p\">)</span>\n\u2028\n    <span class=\"c1\"># the manufacturer name plus the model</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Name:&#39;</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">])</span>\n\u2028\n    <span class=\"c1\"># the general model of the display</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Model:&#39;</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;model&#39;</span><span class=\"p\">])</span>\n\u2028\n    <span class=\"c1\"># a unique string assigned by Windows to this display</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Serial:&#39;</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;serial&#39;</span><span class=\"p\">])</span>\n\u2028\n    <span class=\"c1\"># the name of the brand of the monitor</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Manufacturer:&#39;</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;manufacturer&#39;</span><span class=\"p\">])</span>\n\u2028\n    <span class=\"c1\"># the 3 letter code corresponding to the brand name, EG: BNQ -&gt; BenQ</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Manufacturer ID:&#39;</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;manufacturer_id&#39;</span><span class=\"p\">])</span>\n\u2028\n    <span class=\"c1\"># the index of that display FOR THE SPECIFIC METHOD THE DISPLAY USES</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Index:&#39;</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">])</span>\n\u2028\n    <span class=\"c1\"># the method this monitor can be addressed by</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Method:&#39;</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;method&#39;</span><span class=\"p\">])</span>\n\u2028\n    <span class=\"c1\"># the EDID string of the monitor</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;EDID:&#39;</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">&#39;edid&#39;</span><span class=\"p\">])</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["method", "allow_duplicates"], "funcdef": "def"}, {"fullname": "screen_brightness_control.windows.list_monitors", "modulename": "screen_brightness_control.windows", "qualname": "list_monitors", "type": "function", "doc": "<p>Returns a list of all addressable monitor names</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>method (str):</strong>  the method the monitor can be addressed by. Can be 'wmi' or 'vcp'</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of strings</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"n\">monitors</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">list_monitors</span><span class=\"p\">()</span>\n<span class=\"c1\"># EG output: [&#39;BenQ GL2450H&#39;, &#39;Dell U2211H&#39;]</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["method"], "funcdef": "def"}, {"fullname": "screen_brightness_control.windows.set_brightness", "modulename": "screen_brightness_control.windows", "qualname": "set_brightness", "type": "function", "doc": "<p>Sets the brightness of any connected monitors</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>value (int):</strong>  Sets the brightness to this value as a percentage</li>\n<li><strong>display (int or str):</strong>  The specific display you wish to adjust.\nCan be index, model, name or serial of the display</li>\n<li><strong>method (str):</strong>  the method to use ('wmi' or 'vcp')</li>\n<li><strong>kwargs (dict):</strong>  passed directly to the chosen brightness method</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of ints (0 to 100) (the result of <code>get_brightness</code>)</li>\n<li><strong>None:</strong>  if <code>no_return</code> is True</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>LookupError:</strong>  if the chosen display (with method if applicable) is not found</li>\n<li><strong>ValueError:</strong>  if the chosen method is invalid</li>\n<li><strong>TypeError:</strong>  if the value given for <code>display</code> is not int or str</li>\n<li><strong>Exception:</strong>  if the brightness could not be set by any method</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># set the current brightness to 50%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the brightness of the primary display to 75%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the brightness of any displays using VCP to 25%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;vcp&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the brightness of displays with model name &#39;BenQ GL2450H&#39; to 100%</span>\n<span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">set_brightness</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;BenQ GL2450H&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["value", "display", "method", "kwargs"], "funcdef": "def"}, {"fullname": "screen_brightness_control.windows.get_brightness", "modulename": "screen_brightness_control.windows", "qualname": "get_brightness", "type": "function", "doc": "<p>Returns the brightness of any connected monitors</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>display (int or str):</strong>  The specific display you wish to adjust.\nCan be index, model, name or serial of the display</li>\n<li><strong>method (str):</strong>  the method to use ('wmi' or 'vcp')</li>\n<li><strong>kwargs (dict):</strong>  passed directly to chosen brightness method</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list:</strong>  list of ints (0 to 100)</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>LookupError:</strong>  if the chosen display (with method if applicable) is not found</li>\n<li><strong>ValueError:</strong>  if the chosen method is invalid</li>\n<li><strong>TypeError:</strong>  if the value given for <code>display</code> is not int or str</li>\n<li><strong>Exception:</strong>  if the brightness could not be obtained by any method</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<blockquote>\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">screen_brightness_control</span> <span class=\"k\">as</span> <span class=\"nn\">sbc</span>\n\n<span class=\"c1\"># get the current brightness</span>\n<span class=\"n\">current_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">()</span>\n<span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">current_brightness</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;There is only one detected display&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;There are&#39;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">current_brightness</span><span class=\"p\">),</span> <span class=\"s1\">&#39;detected displays&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get the brightness of the primary display</span>\n<span class=\"n\">primary_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># get the brightness of any displays using VCP</span>\n<span class=\"n\">vcp_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;vcp&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get the brightness of displays with the model name &#39;BenQ GL2450H&#39;</span>\n<span class=\"n\">benq_brightness</span> <span class=\"o\">=</span> <span class=\"n\">sbc</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">get_brightness</span><span class=\"p\">(</span><span class=\"n\">display</span><span class=\"o\">=</span><span class=\"s1\">&#39;BenQ GL2450H&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div>\n</blockquote>\n", "parameters": ["display", "method", "kwargs"], "funcdef": "def"}]